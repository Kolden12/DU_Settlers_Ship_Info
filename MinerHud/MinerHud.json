{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"oreList = {}\n\nlocal itemsList = hub.getContent()\nfor i = 1, #itemsList do     \n    if isOre(system.getItem(itemsList[i].id).displayName) then\n        local n = system.getItem(itemsList[i].id).displayName\n        local q = math.floor(itemsList[i].quantity)\n        table.insert(oreList, {\n                icon = system.getItem(itemsList[i].id).iconPath,\n                name = n,\n                quantity = q,\n                price = price(n)*q,\n                weight = q * system.getItem(itemsList[i].id).unitMass\n        })\n    end\nend\n\n","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"0"},"key":"0"},{"code":"-----------------------------------------------------\n-- Container\n-----------------------------------------------------\ncontainerVolume = hub.getItemsVolume()\ncontainerPercent = math.floor((containerVolume*100)/cargo)\ncontainerMass = reformatInt(math.floor(hub.getItemsMass()/1000))\n\n-----------------------------------------------------\n-- Timer \n-----------------------------------------------------\nellapsedTime = math.floor(system.getArkTime() - startTime)\nminutes = math.floor(ellapsedTime/60)\nseconds = math.floor(ellapsedTime-minutes*60)\ntime = string.format(\"%02d:%02d\",minutes,seconds)\n\n-----------------------------------------------------\n-- Warp cells calculation \n-----------------------------------------------------\nwarpcells = math.floor(((construct.getMass and construct.getMass() or 1000)/1000) * distance/200000 * 0.00025);\nif warpcells < 1 then warpcells = 1 end\n\n-----------------------------------------------------\n-- Ores value calculation \n-----------------------------------------------------\nlocal ores = \"\"\nlocal total = 0\nlocal icon = \"\"\nif oreList then\n   -- icon = \"/\"..oreList[1].icon\n    --G:\\Dual Universe\\Game\\data\\resources_generated\\env\\voxel\\ore\\carbon-ore\\icons\n    \n    --icon = \"assets.prod.novaquark.com/61625/05eb69dc-d7de-4e9a-bdfb-3d4c682f9c5f.png\"\n    for i = 1, #oreList do \n        total = total + oreList[i].price\n        ores = ores .. [[<img src=\"]] .. \"/\"..oreList[i].icon .. [[\" class=\"image\">]]\n        local q = oreList[i].quantity\n        if q > 1000 then q = math.floor(oreList[i].quantity/1000) .. \"kl \" else q = math.floor(oreList[i].quantity) .. \"l \" end\n        ores = ores .. oreList[i].name .. \"<br>\" .. q .. \"<br>\"\n        \n\n    end\n    ores = ores .. \"Value: \" .. reformatInt(total) .. \" Ä§<br>\"\nend\n\n\n-----------------------------------------------------\n-- Radar \n-----------------------------------------------------\nif radar ~= nil then     \n    radarTargets = #radar.getConstructIds()\n    radarHTML = \"Radar: \" .. radarTargets .. \"/\" .. radarTargetsOld\n    if radarTargets > radarTargetsOld then\n        triggerAlert = true        \n    end\n    radarTargetsOld = radarTargets   \nelse\n    radarHTML = \"\"\nend\n\n\n-----------------------------------------------------\n-- Html \n-----------------------------------------------------\ncontent = styleHTML .. \n[[<div class='topbar'>\n    <span> ]] .. radarHTML .. [[ </span>\n    <span> ]] .. time .. [[</span> \n    <span> ]] .. atlas[0][warpTo].name[1] .. [[: ]] .. warpcells .. [[ cells </span> \n</div>\n\n<div class=\"container\">]] .. containerMass .. [[ tons <span style=\"float: right;\">]] .. containerPercent .. [[%</span>\n    <div class=\"progressbar\">\n        <div style=\"width: ]] .. containerPercent .. [[%;\"></div>\n    </div>\n    <div class='ores'>]] .. ores ..[[</div></div>\n    <div class='version'>Miner Hud v]]..version..[[</div>\n    \n]]\n\n-----------------------------------------------------\n-- Local Time \n-----------------------------------------------------\nif showLocalTime then \n    local year, month, day, hour, minute, second, weekDayIndex, weekDayName, weekDayShortName, monthName, monthShortName, daysFromYearStart = DUCurrentDateTime()\n    content = content .. [[<div class='localTime'>]]..string.format(\"%02d:%02d\",hour,minute)..[[ Local</div>]]\nend \n\nif triggerAlert == true then\n    content = content .. [[<div class='alert'>RADAR ALERT</div>]]\n    system.playSound(\"contact.mp3\")\nend \n\nif showHelp then content = content .. helpHTML end\n\n-----------------------------------------------------\n-- Screen \n-----------------------------------------------------\ncontentOld = contentOld or \"\"\nif contentOld ~= content then\n    system.setScreen(content)\n    contentOld = content\nend","filter":{"args":[{"value":"upd"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"system.playSound(\"contact.mp3\")\nremoteController = true --export\nhideWidget = true --export hide widget when starting script, can also be toggled with alt+4\nshowLocalTime = true --export show local time in bottom right corner\n\nwarpTo = 1 --export: warp destination, to calculate cells cost (1=Madis, 2=Alioth, 3=Thades, 4=Talemai, 5=Feli, 6=Sicari, 7=Sinnen, 8=Teoma, 9=Jago)\n--radarThreshold = 1 --export: will show on-screen alert if number of radar targets is above this value\ncargo = 768000 --export: cargo capacity (liters)\n\nBauxite = 5 --export: Bauxite market value\nCoal = 5 --export: Coal market value\nQuartz = 5 --export: Quartz market value\nHematite = 5 --export: Hematite market value\nNatron = 10 --export: Natron market value\nChromite = 10 --export: Chromite market value\nLimestone = 10 --export: Limestone market value\nMalachite = 10 --export: Malachite market value\nGarnierite = 20 --export: Garnierite market value\nAcanthite = 20 --export: Acanthite market value\nPetalite = 20 --export: Petalite market value\nPyrite = 20 --export: Pyrite market value\nCryolite = 0 --export: Cryolite market value\nCobaltite = 0 --export: Cobaltite market value\nKolbeckite = 0 --export: Kolbeckite market value\nGold_Nuggets = 0 --export: Gold_Nuggets market value\nColumbite = 0 --export: Columbite market value\nVanadinite = 0 --export: Vanadinite market value\nIllmenite = 0 --export: Illmenite market value\nRhodonite = 0 --export: Rhodonite market value\nThoramine = 0 --export: Thoramine market value\n\nversion = 0.24\nsystem.print(\"------[ Miner Hud v\" .. version .. \" ]------\")\n\nfor e,f in pairs(unit)do    \n    if type(f)==\"table\"and type(f.export)==\"table\"then\n        if f.getElementClass then\n            if f.getClass()==\"ItemContainer\" and e == \"slot1\" then\n                hub=f                \n            elseif f.getClass()==\"CoreUnitDynamic\"then \n                core=f\n            elseif f.getClass()==\"RadarPVPSpaceSmallGroup\"then \n                radar=f\n            end \n        end \n    end \nend\n\nif hub == nil then\n    system.print(\"Hub not found or not linked to slot1\")\n    unit.exit()\nend\n\nif core == nil then\n    system.print(\"Core not found\")\n    unit.exit()\nend\n\nif radar == nil then\n    system.print(\"Radar not found (optional)\")    \nelse\n    radarTargetsOld = #radar.getConstructIds()\nend\n\n-- check if control unit is remote and set engines\nif remoteController == true then\n    unit.deactivateGroundEngineAltitudeStabilization()    \n    unit.setEngineCommand(\"ALL\",{0,0,0},{0,0,0},0,0,'','','',0)\n    unit.setEngineCommand(\"adjustor\",{0,0,0},{0,0,0},0,0,'','','',0)\n    unit.setEngineThrust (\"ALL\", 0)\n    unit.setEngineThrust (\"adjustor\", 0)\nend\n\nm = hub.getMaxVolume()\nif m == 0 then m = cargo end\ncargo = m\n\nunit.setTimer(\"upd\",1)\nunit.setTimer(\"UpdateContent\",30)\nif hideWidget then unit.hideWidget() end\nsystem.showHelper(0)\nplayer.freeze(0)\nsystem.showScreen(1)\natlas = require('atlas')\ndistance = (vec3(construct.getWorldPosition()) - vec3(atlas[0][warpTo].center)):len()\nstartTime = system.getArkTime()\nhub.updateContent()","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"2"},{"code":"hub.updateContent()","filter":{"args":[{"value":"UpdateContent"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"3"},{"code":"showHelp = not showHelp\n\n--system.print(tostring(showHelp))\n\n--if displayHudPanel == true then\n  --  displayHudPanel = false\n--else\n  --  displayHudPanel = true\n--end","filter":{"args":[{"value":"option1"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"4"},{"code":"triggerAlert = false","filter":{"args":[{"value":"option2"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"5"},{"code":"showRadar = not showRadar\n\nif showRadar == true then\n    panel = system.createWidgetPanel(\"Radar\")\n    widget = system.createWidget(panel, \"radar\")\n    system.addDataToWidget(radar.getWidgetDataId(), widget)\nelse\n    system.destroyWidgetPanel(panel)\nend\n","filter":{"args":[{"value":"option3"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"6"},{"code":"showWidget = not showWidget\n\nif showWidget then unit.showWidget() else unit.hideWidget() end","filter":{"args":[{"value":"option4"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"7"},{"code":"-----------------------------------------------------\n-- Html\n-----------------------------------------------------\nstyleHTML = [[\n<style>\n* {\n    text-shadow: 2px 2px black;\n   \n}\n\n.localTime{\n    position: absolute;\n    float: right;\n    bottom: 0.26vh;\n    right: 8.5vh;\n    font-size: 1.1vh;\n    text-align: right;\n    background-color: rgba(20, 20, 20, 0.5);\n    padding: 0.3vh;\n    text-shadow: 0.1px 0.1px black;\n}\n\n.version{\n    position: absolute;\n    float: left;\n    bottom: 0.4vh;\n    left: 0.6vh;\n    font-size: 1vh;\n    text-align: left;\n}\n\n.container{\n    position: absolute;\n    width: 15vh;\n    right: 2vh;\n    top: 13vh;\n    line-height: 3vh;\n}\n\n.progressbar {\n    background-color: rgba(20, 32, 39, 0.6);\n    -webkit-border-radius:5px;\n    border: 1px solid white;\n}\n\n.progressbar>div {\n    background-color: rgba(240, 230, 230, 0.7);\n    width: 100%;\n    height: 1.8vh;  \n}\n\n.ores {\n   /* position: absolute;\n    top: 8vh;\n    right: 1vh;*/\n    line-height: 2.5vh;  \n    /*  background-color: rgba(20, 32, 39, 0.6);\n    -webkit-border-radius:5px;\n    border: 1px solid black;*/\n    /*text-align: center;*/\n    padding: 0.5vh;\n}\n\n.topbar{\n    position: absolute;\n    display: flex;    \n    justify-content: space-between;\n    left: 0;\n    right: 0;\n    margin: 0 auto;\n    top: 0.4vh;\n    font-size: 1.4vh;\n    width: 30%;\n}\n\n.alert{  \n    position: absolute;\n    top: 6vh;  \n    font-size: 3vh;\n    color: red;\n    font-weight: bold;\n    left: 0;\n    right: 0;\n    margin: 0 auto;\n    width: 30vw;  \n    text-align: center;\n}\n\n.help{\n    position: absolute;\n    left: 1vh;\n    background-color: rgba(20, 32, 39, 0.6);\n    -webkit-border-radius:5px;\n    border: 1px solid black;\n    text-align: left;\n    padding: 0.5vh;\n    line-height: 3vh;  \n}\n\n.showhelp {\n    position: absolute;\n    left: 1vh;\n    top: 0.4vh;\n    font-size: 1vh;\n}\n\n\n.image {\n/*position:absolute;\ntop:1.7vw;\nleft:1.3vw;*/\nwidth:2.8vw;\nheight:2.8vw;\n/*font-size:1vw;\ncolor:#FFF;\ntext-align:center;\ndisplay:flex;\njustify-content:center;\nalign-items:center*/\nfloat: left;\npadding: 0.5vh;\n}\n\n\n\n\n</style>\n\n<div class=\"showhelp\">Alt + 1 = Show Help</div>\n\n]]\n\nhelpHTML = [[\n\n<div class='help'>\nAlt + 1 = Help Panel<br>\nAlt + 2 = Hide current radar alert<br>\nAlt + 3 = Radar Widget<br>\nAlt + 4 = Unit Widget<br>\nCtrl + Backspace = Exit script\n</div>\n\n\n\n]]\n\n","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"8"},{"code":"\n-----------------------------------------------------\n-- Functions\n-----------------------------------------------------\n\nfunction reformatInt(i)\n  return tostring(i):reverse():gsub(\"%d%d%d\", \"%1 \"):reverse():gsub(\"^,\", \"\")\nend\n\nfunction isOre(name)\n    if name == \"Bauxite\" or\n        name == \"Coal\" or\n        name == \"Quartz\" or\n        name == \"Hematite\" or\n        name == \"Natron\" or\n        name == \"Chromite\" or\n        name == \"Limestone\" or\n        name == \"Malachite\" or\n        name == \"Garnierite\" or\n        name == \"Acanthite\" or\n        name == \"Petalite\" or\n        name == \"Pyrite\" or\n        name == \"Cryolite\" or\n        name == \"Cobaltite\" or\n        name == \"Kolbeckite\" or\n        name == \"Gold nuggets\" or\n        name == \"Columbite\" or\n        name == \"Vanadinite\" or\n        name == \"Illmenite\" or\n        name == \"Rhodonite\" or\n        name == \"Thoramine\" then\n        return true\n    else return false\n    end\nend\n\nfunction price(ore)\n    if ore == \"Bauxite\" then return Bauxite elseif\n        ore == \"Coal\" then return Coal elseif\n        ore == \"Quartz\" then return Quartz elseif\n        ore == \"Hematite\" then return Hematite elseif\n        ore == \"Natron\" then return Natron elseif\n        ore == \"Chromite\" then return Chromite elseif\n        ore == \"Limestone\" then return Limestone elseif\n        ore == \"Malachite\" then return Malachite elseif\n        ore == \"Garnierite\" then return Garnierite elseif\n        ore == \"Acanthite\" then return Acanthite elseif\n        ore == \"Petalite\" then return Petalite elseif\n        ore == \"Pyrite\" then return Pyrite elseif\n        ore == \"Cryolite\" then return Cryolite elseif\n        ore == \"Cobaltite\" then return Cobaltite elseif\n        ore == \"Kolbeckite\" then return Kolbeckite elseif\n        ore == \"Gold nuggets\" then return Gold_Nuggets elseif\n        ore == \"Columbite\" then return Columbite elseif\n        ore == \"Vanadinite\" then return Vanadinite elseif\n        ore == \"Illmenite\" then return Illmenite elseif\n        ore == \"Rhodonite\" then return Rhodonite elseif\n        ore == \"Thoramine\" then return Thoramine \n    end\nend\n\n--[[\n    Jericho's time script -- https://github.com/Jericho1060\n    Display IRL date and time in game\n    https://github.com/Jericho1060/DualUniverse/edit/master/TimeScript/TimeScript.lua\n]]\nfunction DUCurrentDateTime(utc)\n    local t = system.getUtcTime()\n    if not utc then t = t + system.getUtcOffset() end\n    local DSEC=24*60*60\n    local YSEC=365*DSEC\n    local LSEC=YSEC+DSEC\n    local FSEC=4*YSEC+DSEC\n    local BASE_DOW=4\n    local BASE_YEAR=1970\n    local _days={-1, 30, 58, 89, 119, 150, 180, 211, 242, 272, 303, 333, 364}\n    local _lpdays={}\n    for i=1,2  do _lpdays[i]=_days[i]   end\n    for i=3,13 do _lpdays[i]=_days[i]+1 end\n    local y,j,m,d,w,h,n,s\n    local mdays=_days\n    s=t\n    y=math.floor(s/FSEC)\n    s=s-y*FSEC\n    y=y*4+BASE_YEAR\n    if s>=YSEC then\n        y=y+1\n        s=s-YSEC\n        if s>=YSEC then\n            y=y+1\n            s=s-YSEC\n            if s>=LSEC then\n                y=y+1\n                s=s-LSEC\n            else\n                mdays=_lpdays\n            end\n        end\n    end\n    j=math.floor(s/DSEC)\n    s=s-j*DSEC\n    local m=1\n    while mdays[m]<j do m=m+1 end\n    m=m-1\n    local d=j-mdays[m]\n    w=(math.floor(t/DSEC)+BASE_DOW)%7\n    if w == 0 then w = 7 end\n    h=math.floor(s/3600)\n    s=s-h*3600\n    n=math.floor(s/60)\n    function round(a,b)if b then return utils.round(a/b)*b end;return a>=0 and math.floor(a+0.5)or math.ceil(a-0.5)end\n    s=round(s-n*60)\n    local weekDaysNames = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"}\n    local weekDaysShortNames = {\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"}\n    local monthNames = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"}\n    local monthShortNames = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}\n    return y,m,d,h,n,s,w,weekDaysNames[w],weekDaysShortNames[w],monthNames[m],monthShortNames[m],j+1\nend\n\n--[[\n    local year, month, day, hour, minute, second, weekDayIndex, weekDayName, weekDayShortName, monthName, monthShortName, daysFromYearStart = DUCurrentDateTime()\n    system.print(string.format(\"%02d/%02d/%04d %02d:%02d:%02d\",day,month,year,hour,minute,second))\n]]","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"9"}],"methods":[],"events":[]}
