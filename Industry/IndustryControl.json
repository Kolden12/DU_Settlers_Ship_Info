{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"screens,industry,oldVar = {},{},\"\"\n\n--local json = require(\"dkjson\")\nscriptname = \"Industry Control\"\nversion = 0.1\nsystem.print(\"-----[ \"..scriptname..\" v\"..version..\" ]-----\")\n\nfor slot,element in pairs(unit)do -- checking elements in slots\n    if type(element)==\"table\"and type(element.export)==\"table\"then\n        if element.getClass then\n            if element.getClass()==\"ScreenUnit\" or element.getClass()==\"ScreenSignUnit\"then \n                screens[#screens+1]=element\n                element.activate()\n            elseif string.find(element.getClass(),\"CoreUnit\") then\n                core=element\n            elseif string.find(element.getClass(),\"Industry\") and #industry < 8 then\n                industry[#industry+1]={\n                    element=element,\n                    slot=slot,\n                    machineName=system.getItem(element.getItemId()).displayName,\n                    machineIcon=system.getItem(element.getItemId()).iconPath,\n                }\n            end \n        end \n    end \nend\n\ntable.sort(industry, function(a,b) return a.slot < b.slot end) -- sorting table by slot\nfunction reformatInt(i) return tostring(i):reverse():gsub(\"%d%d%d\", \"%1 \"):reverse():gsub(\"^,\", \"\") end\nunit.setTimer(\"upd\",0.2)\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"local output,screenVar = \"\",\"local industry = {}\"\n\nfor key, screen in pairs(screens) do\n    n = screen.getScriptOutput()\n    screen.clearScriptOutput()\n    if output ~= n then\n        output = n\n        for slot_name, machine in pairs(unit) do\n            local a,b = string.match(output, \"(.*),(.*)\")\n            if b == slot_name then\n                if string.find(output,\"Stopped\") then\n                    if #machine.getInfo().currentProducts > 0 then M = machine end\n                else\n                    machine.stop(1,0)\n                end\n            end\n        end\n    end\nend\n\nfor i=1, #industry do\n    state = industry[i].element.getInfo().state\n\n    product = 0\n    if #industry[i].element.getInfo().currentProducts > 0 then \n        product = industry[i].element.getInfo().currentProducts[1].id\n    end\n\n    schemRequired = system.getItem(industry[i].element.getInfo().requiredSchematicIds[1]).displayName\n    if schemRequired ~= \"\" then ingredients = \"'\"..schemRequired..\"'\" else ingredients = \"'No schematic required'\" end\n\n    t = industry[i].element.getInputs()\n    for j = 1, #t do\n        ingredients = ingredients..\",'\"..system.getItem(t[j].id).displayName..\"'\"\n    end\n\n    if state == 1 then\n        conf = \"Stopped\"\n    elseif industry[i].element.getInfo().maintainProductAmount > 0 then \n        conf = \"Maintain \"..reformatInt(math.floor(industry[i].element.getInfo().maintainProductAmount))\n    elseif industry[i].element.getInfo().batchesRequested > 0 then\n        conf = \"Crafting \"..industry[i].element.getInfo().batchesRemaining..\"/\"..industry[i].element.getInfo().batchesRequested\n    end\n\n    screenVar = screenVar ..[[\n    scriptname = ']]..scriptname..[['\n    version = ]]..version..[[\n    industry[]]..i..[[]={\n    slot = ']]..industry[i].slot..[[',\n    machineName = ']]..industry[i].machineName..[[',\n    machineIcon = ']]..industry[i].machineIcon..[[',\n    conf = ']]..conf..[[',\n    state = ']]..state..[[',\n    product = ]]..product..[[,\n    icon = ']]..system.getItem(product).iconPath..[[',\n    name = ']]..system.getItem(product).displayNameWithSize..[[',\n    ingredients = {]]..ingredients..[[},\n    }]]\nend\n\nif oldVar ~= screenVar then\n    for key, screen in pairs(screens) do screen.setRenderScript(screenVar..screenContent) end\n   -- system.print(\"updating screens\")\n    oldVar = screenVar\nend","filter":{"args":[{"value":"upd"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"if M ~= nil then \n\n    c = string.match(text, \"^(%d+)[mM]$\")\n    if c then\n        M.startMaintain(c)\n        --system.print(\"Maintain \"..c)\n        M = nil\n    end\n\n    d = string.match(text, \"^(%d+)$\")\n    if d then\n        M.startFor(d)\n        --system.print(\"Crafting \"..d)\n        M = nil\n    end\n\nend","filter":{"args":[{"variable":"*"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"2"},{"code":"screenContent = [[\nlocal Layer = createLayer()\nlocal ImageLayer = createLayer()\nlocal TextLayer = createLayer()\nlocal rx, ry = getResolution()\nlocal cx,cy=getCursor()\n--local json = require(\"dkjson\")\nlocal BiggestFont = loadFont(\"Play-Bold\", 25)\nlocal NormalFont = loadFont('Play', 18)\nlocal SmallFont = loadFont('RobotoCondensed', 16)\nlocal SmallestFont = loadFont('RobotoCondensed', 8)\nlocal fontColor = {r=1,g=1,b=1}\nlocal color1 = {r=255/255,g=255/255,b=250/255 } \nlocal color2 = {r=50/255,g=100/255,b=250/255 } \nsel = sel or {0,0,0,0,0}\n\n\nfunction AddText(layer,align,color,font,text,x,y)\n    setNextTextAlign(layer, align, AlignV_Middle)\n    setNextFillColor(layer, color.r, color.g, color.b, 1)  \n    addText(layer, font, text, x,y) \nend\n\nfunction DrawArrow(X,Y)\n    local oX = rx*0.004\n    addLine(Layer,X,Y,X+oX*2,Y+oX*2)  \n    addLine(Layer,X+oX*2,Y+oX*2,X,Y+oX*4)  \nend\n\nfunction Get_State(str)\n    arr = {}\n    if str == '1' then  arr={\"Stopped\",{r=1,g=0.1,b=0.1}}\n    elseif str == '2' then arr={\"Running\",{r=0.1,g=1,b=0.1}}\n    elseif str == '3' then arr={\"Missing Ingredients\",{r=1,g=0.1,b=0.1}}\n    elseif str == '4' then arr={\"Output Full\",{r=1,g=1,b=0.1}}\n    elseif str == '5' then arr={\"No Output Container\",{r=1,g=0.1,b=0.1}}\n    elseif str == '6' then arr={\"Pending\",{r=0.1,g=1,b=0.1}}\n    elseif str == '7' then arr={\"Missing Schematics\",{r=1,g=0.1,b=0.1}}\n    end\n    return arr\nend\n\nsetDefaultStrokeColor(Layer,Shape_Line,color2.r,color2.g,color2.b,1)\nAddText(Layer,AlignH_Center,fontColor,SmallestFont,scriptname..\" v\"..version, rx*0.5,ry*0.97)\n--table.sort(industry, function(a,b) return a.name < b.name end) -- sorting table by name\n\nlocal x = rx*0.0125\nlocal width = rx*0.48\nlocal height = ry*0.21\nlocal iconSize = 80 \nlocal y = ry*0.001-height\nlocal offsetX = rx*0.006\nlocal offsetY = ry*0.02\n\nfor i=1, #industry do\n    if (i % 2 == 0) then --it is even\n        x = rx*0.5075\n    else --it is odd\n        x = rx*0.0125\n        y = y+height+ry*0.02\n    end\n\n    setNextFillColor(Layer, 0.01, 0.01, 0.01, 0.9)   \n    addBoxRounded(Layer,x,y,width,height,5)\n\n    if industry[i].state == \"1\" then\n        setNextFillColor(ImageLayer, 0.1, 0.1, 0.1, 0.8)   \n        addBoxRounded(ImageLayer,x,y,width,height,5)\n        fontColor = {r=0.2,g=0.2,b=0.2}\n        ActionText = \"Start\"\n    else\n        ActionText = \"Stop\"\n    end\n    if industry[i].name == \"\" then\n        ActionText = \"No recipe\"\n    end\n\n    -- Machine Name\n    AddText(Layer,AlignH_Left,fontColor,NormalFont,industry[i].machineName, x+offsetX,y+offsetY)\n\n    -- Machine State\n    AddText(Layer,AlignH_Left,{r=Get_State(industry[i].state)[2].r,g=Get_State(industry[i].state)[2].g,b=Get_State(industry[i].state)[2].b},SmallFont,Get_State(industry[i].state)[1], x+offsetX,y+height-offsetY)\n\n    -- Product Name\n    AddText(Layer,AlignH_Right,fontColor,NormalFont,industry[i].name, x+width-offsetX,y+height-offsetY)\n\n    -- Configuration\n    AddText(Layer,AlignH_Right,fontColor,SmallFont,industry[i].conf, x+width-offsetX,y+offsetY)\n\n    -- Ingredients  \n    Y = y+height*0.25\n    for p=1, #industry[i].ingredients do\n        if p < 5 then X = x+width*0.28 else X = x+width*0.53 end\n        if p == 5 then Y = y+height*0.25 end\n        AddText(Layer,AlignH_Left,fontColor,SmallestFont,industry[i].ingredients[p], X,Y+offsetY) \n        Y = Y+offsetY \n    end\n\n    -- Machine Icon\n    image = loadImage(industry[i].machineIcon)\n    addImage(ImageLayer, image, x+offsetX,y+height*0.5-iconSize*0.5, iconSize, iconSize)\n\n    -- Product Icon\n    image2 = loadImage(industry[i].icon)\n    addImage(ImageLayer, image2, x+width-iconSize-offsetX,y+height*0.5-iconSize*0.5, iconSize, iconSize)\n\n\n    -- Mouse over\n    if cx > x and cx < x+width and cy > y and cy < y+height then\n\n        fontColor = {r=1,g=1,b=1}    \n        setNextShadow(ImageLayer,15,color2.r, color2.g, color2.b,1)\n        setNextFillColor(ImageLayer,color2.r, color2.g, color2.b,0)  \n        addBoxRounded(ImageLayer,x,y,width,height,5)\n        setNextFillColor(ImageLayer,0.01, 0.01, 0.01,1)  \n        addBox(ImageLayer,x+width*0.2,y+height*0.25,width*0.6,height*0.5)\n        AddText(ImageLayer,AlignH_Center,fontColor,BiggestFont,ActionText,x+width*0.5,y+height*0.4)\n        if getCursorReleased() then\n            sel = {x,y,width,height,industry[i].state,industry[i].name}\n            setOutput(industry[i].conf..\",\"..industry[i].slot)\n        end\n    end\n\n\n    DrawArrow(x+width*0.21,y+height*0.45)\n    DrawArrow(x+width*0.78,y+height*0.45)\n\n\n\nend\n\n-- Selection\nif sel[1] > 0 then\n    fontColor = {r=1,g=1,b=1}\n    setNextShadow(ImageLayer,15,color2.r, color2.g, color2.b,1)\n    setNextFillColor(ImageLayer,color2.r, color2.g, color2.b,0.6)\n    addBoxRounded(ImageLayer,sel[1],sel[2],sel[3],sel[4],5)\n\n\n    if sel[5] == \"1\" then\n\n        if sel[6] == \"\" then -- machine stopped with no recipe\n            t = \"Select recipe from machine\"\n\n        else -- machine stopped with recipe\n            t = \"Enter quantity for \"..sel[6]\n            AddText(ImageLayer,AlignH_Center,fontColor,SmallFont,\"add 'M' for maintain mode, ie: 5000M\",sel[1]+sel[3]*0.5,sel[2]+sel[4]*0.825)\n        end\n\n    else -- machine not stopped\n        t= \"Stopping...\"\n\n    end\n    AddText(ImageLayer,AlignH_Center,fontColor,SmallFont,t,sel[1]+sel[3]*0.5,sel[2]+sel[4]*0.675)\nend\n\n\nrequestAnimationFrame(20)\n]]","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"3"}],"methods":[],"events":[]}
