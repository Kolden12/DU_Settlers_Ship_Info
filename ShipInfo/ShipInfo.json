{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"GetHubContent()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"0"},"key":"0"},{"code":"GetHubContent()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"1"},"key":"1"},{"code":"GetHubContent()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"2"},"key":"2"},{"code":"GetHubContent()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"3"},"key":"3"},{"code":"GetHubContent()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"4"},"key":"4"},{"code":"GetHubContent()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"5"},"key":"5"},{"code":"GetHubContent()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"6"},"key":"6"},{"code":"GetHubContent()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"7"},"key":"7"},{"code":"GetHubContent()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"8"},"key":"8"},{"code":"GetHubContent()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"9"},"key":"9"},{"code":"--if vec3(unit.getMasterPlayerPosition()):len()>25 then\n --   unit.exit()\n--else\n\n\nFirstRun = false\n\n    UpdateData()\n--end","filter":{"args":[{"value":"upd"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"10"},{"code":"if RepairMode and FirstRun == false then\n    \n    local html = \"\"\n    for i = 1, #DamagedElements do \n        local pos = core.getElementPositionById(DamagedElements[i].id)\n        local screenPos=library.getPointOnScreen(ConvertLocalToWorld(pos, constructPos, constructRight, constructForward, constructUp))\n        local font_size = 14 * ((200-screenPos[3])/200)\n        local zindex = utils.round(1000 - screenPos[3])\n        containerHtml = [[<div class=\"mainContainer\" style=\"left:]].. utils.round(screenPos[1]*100) .. [[%;top:]].. utils.round(screenPos[2]*100) .. [[%;font-size:]].. font_size .. [[px;z-index:]]..zindex..[[;\">]]\n        if DamagedElements[i].w == 0 then\n            dotColor = \"#FE2E2E\"\n            progressHtml = \"\"\n        else \n            dotColor = \"#FFBF00\"\n            progressHtml = [[<div class=\"progress\">\n            <div class=\"progress-bar\" style=\"width:]].. DamagedElements[i].w*100/DamagedElements[i].m ..[[%;\">\n            </div></div>]]\n        end\n        dotHtml = [[<div><div class=\"dot\" style=\"color:]].. dotColor .. [[;font-size:]].. font_size*10-70 .. [[px;\">&#x2022<div class=\"resto\" style=\"font-size:]].. font_size+2 .. [[px;\">]].. DamagedElements[i].r ..[[</div></div></div>]]\n        labelHtml = [[<div class=\"subContainer\"><span class=\"name\">]].. DamagedElements[i].l .. [[</span>]]\n        --restoHtml = [[<span class=\"resto\" style=\"font-size:]].. font_size .. [[px;\">(]].. DamagedElements[i].r .. \"/\"..DamagedElements[i].rm..[[)</span></div>]]\n        --restoHtml = [[</div>]]\n        html = html .. containerHtml..dotHtml..labelHtml..progressHtml..\"</div></div>\"\n    end\n    if FirstRun then\n        system.showScreen(0)\n        system.print(\"system.showScreen(0)\")\n    else\n        system.showScreen(1)\n        system.setScreen(css..html)\n    end\nelse\n    system.showScreen(0)\nend\n","filter":{"args":[{"value":"repair"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"11"},{"code":"------------------------------------------------------------------------------\n------ Ship Info by Krengus --------------------------------------------------\n------ support and feedback: https://discord.gg/BfnbtFyHrt\n------------------------------------------------------------------------------\nversion = 0.755\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n-- USER VARIABLES --\n\nHub1_Max_Volume = 865500 --export Used only if function fails to get maxVol\nHub2_Max_Volume = 487500 --export Used only if function fails to get maxVol\nHub3_Max_Volume = 487500 --export Used only if function fails to get maxVol\nHub4_Max_Volume = 487500 --export Used only if function fails to get maxVol\n\nPrimary_Color = \"0.2,0.4,1.1\" --export\nSecondary_Color = \"1,0.8,0.6\" --export\nFont_Color = \"1,1,1\" --export\nBackground_Selection_Color = \"0,0,0\" --export\nBackground_Selection_Opacity = 0.2 --export\nBackground_Image = \"assets.prod.novaquark.com/61625/916a89d6-4103-4b28-9a48-04575d9a2b2b.png\" --export\n\n\nContainer_Optimization = 5 --export\nFuel_Tank_Optimization = 5 --export\nSpace_Fuel_Tank_Handling = 5 --export\nAtmo_Fuel_Tank_Handling = 5 --export\nRocket_Fuel_Tank_Handling = 5 --export\n\nMaxDamagedElements = 14 --export Max amount of damaged elements to show on repair screen\n\nRefresh_Rate = 1 --export\nShow_Unit = false --export\nDebug = false --export\n\nShortened_Tank_Labels = true --export: set to false to use elements names as labels\n\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n-- Layout: {X1,Y1,X2,Y2,X3,Y3,X4,Y4,X5,Y5,X6,Y6} \n-- 1 = INFO\n-- 2 = DAMAGED ELEMENTS\n-- 3 = FUEL TANKS\n-- 4 = CARGO HUBS\n-- 5 = DOCKED CONSTRUCTS\n-- 6 = BOARDED PLAYERS\n\nCustom_Layout = {0.22,0.16,0.5,0.646,1,1,0.53,0.16,0.22,0.4,0.53,0.4}\n\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n-- SCRIPT VARIABLES --\n\nFirstRun = true\nOldContent = {}\nscreens =  {}\nDamagedElements = {}\nMaxHandlingHP = 1.2 -- multiplier for maxed HP handling talents\n\nlocal AtmoTankXS = 49 -- base hitpoints, used to find out tank size and weight   \nlocal AtmoTankS = 162\nlocal AtmoTankM = 1314\nlocal AtmoTankL = 10460\nlocal SpaceTankXS = 49\nlocal SpaceTankS = 186\nlocal SpaceTankM = 1495\nlocal SpaceTankL = 15932\nlocal RocketTankXS = 365\nlocal RocketTankS = 735\nlocal RocketTankM = 6230\nlocal RocketTankL = 68823\n\nlocal HubMaxVol = {Hub1_Max_Volume,Hub2_Max_Volume,Hub3_Max_Volume,Hub4_Max_Volume}\nlocal hubs = {}\n--local Hubs = {}\nlocal tanks = {}\n\n--construct pos for AR data\nconstructPos = construct.getWorldPosition()\nconstructRight = construct.getWorldRight()\nconstructForward = construct.getWorldForward()\nconstructUp = construct.getWorldUp()\n--functions\nfunction ConvertLocalToWorld(a,b,c,d,e)local f={a[1]*c[1],a[1]*c[2],a[1]*c[3]}local g={a[2]*d[1],a[2]*d[2],a[2]*d[3]}local h={a[3]*e[1],a[3]*e[2],a[3]*e[3]}return{f[1]+g[1]+h[1]+b[1],f[2]+g[2]+h[2]+b[2],f[3]+g[3]+h[3]+b[3]}end\n\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n-- SCRIPT START --\n\n\n\n-------- start check elements in slots\n------------------------------------------------\nfor slot,element in pairs(unit)do -- checking core, screens and databank\n    if type(element)==\"table\"and type(element.export)==\"table\"then\n        if element.getClass then\n            if element.getClass()==\"ScreenUnit\"then \n                screens[#screens+1]=element\n                screens[#screens].slot=slot\n                screens[#screens].id=element.getLocalId()\n                element.activate()\n            elseif element.getClass()==\"CoreUnitDynamic\"then \n                core=element\n            elseif element.getClass()==\"DataBankUnit\"then \n                databank=element\n            end \n        end \n    end \nend\n\nif not next(screens)then system.print(\"No screen found\");unit.exit()end\nif core == nil then system.print(\"No core found\");unit.exit()end\nif databank == nil then system.print(\"No databank found\");unit.exit()end\n\nfor slot,element in pairs(unit)do -- checking containers\n    if type(element)==\"table\" and type(element.export)==\"table\"then\n        if element.getClass and string.match(element.getClass(), \"Container\")then\n            local max = element.getMaxVolume()\n            if max == 0 then\n                max = HubMaxVol[#hubs+1]\n                if Debug then system.print(\"Failed to get MaxVolume for \"..core.getElementNameById(element.getLocalId())..\" on \"..slot..\", using variable\")end\n            end\n            table.insert(hubs, {\n                    element = element,\n                    slot = slot,\n                    l = core.getElementNameById(element.getLocalId()),\n                    max = max,\n                    v = math.floor(element.getItemsVolume()),\n                    w = math.floor(element.getItemsMass()/1000)\n                })\n        end\n    end\nend\n\n\nif not next(hubs) then system.print(\"No container found\");unit.exit()elseif #hubs>4 then system.print(\"4 containers max\");unit.exit() end\n\ntable.sort(hubs, function(a,b) return a.slot < b.slot end) -- sorting hubs table by slot\ntable.sort(screens, function(a,b) return a.slot < b.slot end) -- sorting screens table by slot\n------------------------------------------------\n-------- end check elements in slots\n\nlocal elements = core.getElementIdList() -- Building Tanks Table\n\nfor i = 1, #elements do\n\n    local ElementType = core.getElementDisplayNameById(elements[i]) \n\n    if string.match(ElementType, \"Fuel Tank\") then\n        local ElementName = core.getElementNameById(elements[i])\n        local MaxHitPoints = core.getElementMaxHitPointsById(elements[i])\n\n        if string.match(ElementType, \"Atmospheric Fuel Tank\") then\n            if MaxHitPoints > AtmoTankXS and MaxHitPoints < AtmoTankXS*MaxHandlingHP then\n                TankWeight = 35.03\n                TankMaxVolume = 100\n                TankLabel = \"Atmo Tank XS [\"..elements[i]..\"]\"\n            elseif MaxHitPoints > AtmoTankS and MaxHitPoints < AtmoTankS*MaxHandlingHP then\n                TankWeight = 182.67\n                TankMaxVolume = 400\n                TankLabel = \"Atmo Tank S [\"..elements[i]..\"]\"\n            elseif MaxHitPoints > AtmoTankM and MaxHitPoints < AtmoTankM*MaxHandlingHP then\n                TankWeight = 988.67\n                TankMaxVolume = 1600\n                TankLabel = \"Atmo Tank M [\"..elements[i]..\"]\"\n            elseif MaxHitPoints > AtmoTankL and MaxHitPoints < AtmoTankL*MaxHandlingHP then\n                TankWeight = 5481.27            \n                TankMaxVolume = 12800\n                TankLabel = \"Atmo Tank L [\"..elements[i]..\"]\"\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            if Shortened_Tank_Labels == false then TankLabel = ElementName end\n            table.insert(tanks, {\n                    id = elements[i],\n                    u = TankWeight,\n                    t = ElementType,\n                    l = TankLabel,\n                    m = TankMaxVolume*(1+Atmo_Fuel_Tank_Handling*0.2)\n                })\n\n        elseif string.match(ElementType, \"Space Fuel Tank\") then\n            if MaxHitPoints > SpaceTankXS and MaxHitPoints < SpaceTankXS*MaxHandlingHP then\n                TankWeight = 35.03\n                TankMaxVolume = 100\n                TankLabel = \"Space Tank XS [\"..elements[i]..\"]\"\n            elseif MaxHitPoints > SpaceTankS and MaxHitPoints < SpaceTankS*MaxHandlingHP then\n                TankWeight = 182.67\n                TankMaxVolume = 400\n                TankLabel = \"Space Tank S [\"..elements[i]..\"]\"\n            elseif MaxHitPoints > SpaceTankM and MaxHitPoints < SpaceTankM*MaxHandlingHP then\n                TankWeight = 988.67\n                TankMaxVolume = 1600\n                TankLabel = \"Space Tank M [\"..elements[i]..\"]\"\n            elseif MaxHitPoints > SpaceTankL and MaxHitPoints < SpaceTankL*MaxHandlingHP then\n                TankWeight = 5481.27  \n                TankMaxVolume = 12800\n                TankLabel = \"Space Tank L [\"..elements[i]..\"]\"\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            if Shortened_Tank_Labels == false then TankLabel = ElementName end\n            table.insert(tanks, {\n                    id = elements[i],\n                    u = TankWeight,\n                    t = ElementType,\n                    l = TankLabel,\n                    m = TankMaxVolume*(1+Space_Fuel_Tank_Handling*0.2)\n                })\n\n        elseif string.match(ElementType, \"Rocket Fuel Tank\") then\n            if MaxHitPoints > RocketTankXS and MaxHitPoints < RocketTankXS*MaxHandlingHP then\n                TankWeight = 173.42\n                TankMaxVolume = 400\n                TankLabel = \"Rocket Tank XS [\"..elements[i]..\"]\"\n            elseif MaxHitPoints > RocketTankS and MaxHitPoints < RocketTankS*MaxHandlingHP then\n                TankWeight = 886.72\n                TankMaxVolume = 800\n                TankLabel = \"Rocket Tank S [\"..elements[i]..\"]\"\n            elseif MaxHitPoints > RocketTankM and MaxHitPoints < RocketTankM*MaxHandlingHP then\n                TankWeight = 4724.43\n                TankMaxVolume = 6400\n                TankLabel = \"Rocket Tank M [\"..elements[i]..\"]\"\n            elseif MaxHitPoints > RocketTankL and MaxHitPoints < RocketTankL*MaxHandlingHP then\n                TankWeight = 25741.76   \n                TankMaxVolume = 50000\n                TankLabel = \"Rocket Tank L [\"..elements[i]..\"]\"\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            if Shortened_Tank_Labels == false then TankLabel = ElementName end\n            table.insert(tanks, {\n                    id = elements[i],\n                    u = TankWeight,\n                    t = ElementType,\n                    l = TankLabel,\n                    m = TankMaxVolume*(1+Rocket_Fuel_Tank_Handling*0.2)\n                })\n        end\n    end\nend\n\ntable.sort(tanks, function(a,b) return a.t < b.t end) -- sorting tanks table by type\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n-- UPDATE DATA FUNCTION --\n\nfunction UpdateData()\n    \n    RepairMode = false\n\n    \n\n    if FirstRun then RepairMode = true end\n\n    local vars = nil\n    local aid = nil\n\n    for key, screen in pairs(screens) do -- checking screens output for action triggers\n\n        if Debug then start = system.getArkTime()end\n\n        if databank.hasKey(screen.id) == nil then            \n            unit.exit() -- if databank is not rendered anymore (too far) and crashes script\n        elseif databank.hasKey(screen.id) then\n            \n        else \n            if Debug then system.print(\"Databank index key not found, setting default value\") end\n            databank.setStringValue(screen.id,1)\n\n        end\n\n        local o = screen.getScriptOutput()\n\n        if  type(o) == 'table' then\n          --  if o.ThemeSelection[1] ~= nil then\n             --   if comparetables(json.decode(databank.getStringValue(\"theme\")), o.ThemeSelection) == false then\n                  --  databank.setStringValue(\"theme\", json.encode(o.ThemeSelection))\n              --  end\n          --  end\n\n            if o.Index ~= nil then o = o.Index end\n\n        elseif type(o) == 'string' then\n            if string.find(o, \",\") then -- if comma found in output\n                for screenindex, value in (o):gmatch \"(%w+)%s*,%s*(%w+)\" do\n                    o = screenindex\n                    aid = value\n                    if tonumber(o) == 52 then\n                        construct.forceUndock(aid)\n                        if Debug == true then system.print(\"undocking \"..aid) end\n                    elseif tonumber(o) == 62 then\n                        construct.forceDeboard(aid)\n                        if Debug == true then system.print(\"unboarding \"..aid) end\n                    end\n                end\n            end\n        end\n\n        if o ~= '' and o ~= nil then  -- if output not empty\n            if tonumber(o) ~= tonumber(databank.getStringValue(screen.id)) then -- checking if value already exists in DB\n                databank.setStringValue(screen.id, o)\n                if Debug then system.print(\"writing to databank screenId: \"..screen.id..\" index: \"..o) end\n            end\n        end     \n\n        if tonumber(o) == 2 then \n            RepairMode = true;if Debug then system.print(\"entering repair mode\") end\n        end\nend\n        ------------------------------------------------------------------------------\n        -- setting up variables for screens\n\n\n        vars = [[\n        local color1 = {r=]]..split(Primary_Color,\",\")[1]..[[,g=]]..split(Primary_Color,\",\")[2]..[[,b=]]..split(Primary_Color,\",\")[3]..[[}\n        local color2 = {r=]]..split(Secondary_Color,\",\")[1]..[[,g=]]..split(Secondary_Color,\",\")[2]..[[,b=]]..split(Secondary_Color,\",\")[3]..[[}\n        local fontColor = {r=]]..split(Font_Color,\",\")[1]..[[,g=]]..split(Font_Color,\",\")[2]..[[,b=]]..split(Font_Color,\",\")[3]..[[}\n        local SelectionBackground = {r=]]..split(Background_Selection_Color,\",\")[1]..[[,g=]]..split(Background_Selection_Color,\",\")[2]..[[,b=]]..split(Background_Selection_Color,\",\")[3]..[[}\n        local SelectionOpacity = ]]..Background_Selection_Opacity..[[\n        local _background = \"]]..Background_Image..[[\"\n        local version = ]]..version..[[        \n        local debug = ]]..tostring(Debug)..[[\n    \n        ]]..GetHubData(hubs)..[[\n        ]]..GetTankData(tanks)..[[\n        ]]..GetDamagedData(RepairMode)..[[\n        ]]..GetDockedData()..[[\n        ]]..GetBoardedData()..[[\n        local ShipName = \"]]..construct.getName()..[[\" \n        local ShipMass = ]]..math.floor(construct.getMass())..[[ \n        local MaxCCS = ]]..math.floor(core.getMaxCoreStress())..[[\n\n\n        ]]\n\n        if Debug then\n            duration = (system.getArkTime() - start)*1000\n            duration = math.floor((duration) * 100) / 100\n            debug = \"local Duration = \"..duration\n        else\n            debug = \"\"\n        end\n    \n    \n    for key, screen in pairs(screens) do -- now updating screens\n        screen.setScriptInput(system.getArkTime())\n        if vars ~= OldContent[screen.id] then\n            screen.setRenderScript(debug.. \" local SavedIndex=\"..databank.getStringValue(screen.id)..\" local ScreenId=\"..screen.id..'\\n'..vars ..'\\n'.. screenContent)\n            if Debug then system.print(\"updating screen \"..screen.id) end\n            OldContent[screen.id] = vars            \n        end\n        \n\nend\n    \nend\n-- END UPDATE DATA FUNCTION --\n------------------------------------------------------------------------------\n\nUpdateData()\nunit.setTimer(\"repair\")\nunit.setTimer(\"upd\",Refresh_Rate)\nif Show_Unit == false then unit.hideWidget()end\n\n\n\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"12"},{"code":"css = [[<style>\n\n.mainContainer{\nposition:absolute;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}  \n\n.subContainer{\ndisplay: flex;\nflex-direction: column;\n}\n\n.name{\nmargin-left:0.4vh;\npadding: 0.2vh;\nbackground: black;\nopacity: 0.8;\nborder-radius: 5px 5px 0 0;\n}\n\n.dot{\nborder-radius: 50%;\nposition: relative;\n}\n\n.resto{\nposition: absolute;\ntop: 55%;\nleft: 51%;\ntransform: translate(-50%,-50%);\nfont-weight: bold;\ncolor: black;\n}\n\n.progress {\npadding-top: 0.28vh;\nmargin-left:0.5vh;\nbackground: rgba(0, 0, 0, 0.35);\n}\n\n.progress-bar {\nbackground-color: #FFBF00;\nheight: 0.36vh;    \n}\n\n</style>]]","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"13"},{"code":"function GetHubData(hubs)\n    local z,w = 0,0\n    local d = 'local HubData = {}'\n    for i = 1, #hubs do\n        w = math.floor(hubs[i].element.getItemsMass()/1000)\n        d = d..[[            \n        HubData[]]..i..[[]= {\n        l=\"]]..hubs[i].l..[[\",\n        m= ]]..hubs[i].max..[[,\n        v= ]]..math.floor(hubs[i].element.getItemsVolume())..[[,\n        w= ]].. w ..[[}]]\n        z = z + w\n    end    \n    d = d..[[ local HubTotalWeight = ]]..z\n    return d\nend\n\nfunction GetTankData(tanks)\n    local z = 0   \n    local d = 'local FuelData = {}'\n    for i = 1, #tanks do\n        local w = core.getElementMassById(tanks[i].id)\n        if string.match(tanks[i].t, \"Atmospheric\") then\n            f = 4\n        elseif string.match(tanks[i].t, \"Space\") then\n            f = 6\n        elseif string.match(tanks[i].t, \"Rocket\") then\n            f = 0.8\n        end        \n        d = d..[[            \n        FuelData[]]..i..[[]= {\n        l=\"]]..tanks[i].l..[[\",\n        m= ]].. tanks[i].m ..[[,\n        v= ]]..math.floor((w - tanks[i].u)/f*(1+Container_Optimization/10+Fuel_Tank_Optimization/10))..[[,\n        t= \"]]..tanks[i].t..[[\",\n        w= ]]..math.floor((w - tanks[i].u)/1000)..[[}]]\n        z = z + w - tanks[i].u\n    end\n    d = d..[[local TankTotalWeight = ]]..z\n    return d\nend\n\nfunction GetDockedData()\n    local d = 'local DockedData = {}'\n    local z = 0\n    local a = construct.getDockedConstructs()\n    for i = 1, #a do\n        w = construct.getDockedConstructMass(a[i])\n        z = z + w\n        d = d..[[\n        DockedData[]]..i..[[]= {\n        l=\"Construct []]..a[i]..[[]\",\n        id= ]].. a[i] ..[[,\n        w= ]]..math.floor(w/1000)..[[}]]\n    end\n    d = d..[[local DockedTotalWeight = ]]..z\n    return d\nend\n\nfunction GetBoardedData()\n    local d = 'local BoardedData = {}'\n    local z = 0\n    local a = construct.getPlayersOnBoard()\n    for i = 1, #a do\n        w = construct.getBoardedPlayerMass(a[i])\n        z = z + w\n        x = system.getPlayerName(a[i])\n        if x == \"\" then x = \"Player [\"..a[i]..\"]\" end\n        d = d..[[\n        BoardedData[]]..i..[[]= {\n        l=\"]]..x..[[\",\n        id= ]].. a[i] ..[[,\n        w= ]]..math.floor(w/1000)..[[}]]\n    end\n    d = d..[[local PlayerTotalWeight = ]]..z\n    return d\nend\n\nfunction GetDamagedData(r)\n    DamagedElements = {}\n    local d = 'local DamagedElements = {}' -- initializing data as string\n    BrokenCount = BrokenCount or 0\n    DamagedCount = DamagedCount or 0\n    TotalMaxHitPoints = TotalMaxHitPoints or 0\n    TotalHitPoints = TotalHitPoints or 0\n    if r then -- if repair mode\n        BrokenCount = 0\n        DamagedCount = 0\n        TotalMaxHitPoints = 0\n        TotalHitPoints = 0\n        local elements = core.getElementIdList()\n        for i = 1, #elements do \n            local MaxHitPoints = core.getElementMaxHitPointsById(elements[i])\n            local HitPoints = core.getElementHitPointsById(elements[i])\n            TotalMaxHitPoints = TotalMaxHitPoints + MaxHitPoints\n            TotalHitPoints = TotalHitPoints + HitPoints\n\n            if tonumber(HitPoints) < tonumber(MaxHitPoints) then\n                if HitPoints == 0 then BrokenCount = BrokenCount +1 end\n                if HitPoints > 0 then DamagedCount = DamagedCount +1 end\n                local restoCurrent = core.getElementRestorationsById(elements[i])\n                local restoMax = core.getElementMaxRestorationsById(elements[i])\n                table.insert(DamagedElements,{\n                        l = core.getElementNameById(elements[i]),\n                        w = HitPoints,\n                        id = elements[i],\n                        m = MaxHitPoints,\n                        r = restoCurrent,\n                        rm = restoMax\n                    })\n            end\n        end\n\n        local max = #DamagedElements\n        if max > MaxDamagedElements then max = MaxDamagedElements end\n\n        for i=1, max do\n            d = d..[[\n            DamagedElements[]].. i .. [[]= {\n            l=\"]].. DamagedElements[i].l..[[\",\n            id= ]].. DamagedElements[i].id ..[[,\n            m= ]].. DamagedElements[i].m ..[[,\n            r= ]].. DamagedElements[i].r ..[[,\n            rm= ]].. DamagedElements[i].rm ..[[,\n            w= ]].. DamagedElements[i].w ..[[}]]\n        end\n    end\n    d = d..[[\n    local TotalMaxHitPoints = ]]..TotalMaxHitPoints..[[\n    local TotalHitPoints = ]]..TotalHitPoints..[[\n    local BrokenCount= ]].. BrokenCount ..[[\n    local DamagedCount= ]].. DamagedCount ..[[]]\n    return d\nend\n\nfunction comparetables(t1, t2)\n    if #t1 ~= #t2 then return false end\n    for i=1,#t1 do\n        if t1[i] ~= t2[i] then return false end\n    end\n    return true\nend\n\nfunction split(str, sep)\n    local result = {}\n    local regex = (\"([^%s]+)\"):format(sep)\n    for each in str:gmatch(regex) do\n        table.insert(result, each)\n    end\n    return result\nend\n\n\n","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"14"},{"code":"screenContent = [[\n\n\nScreenIndex = ScreenIndex or SavedIndex\nID = ID or 0\n\nif string.find(ScreenIndex, \",\") then\n    for a, b in (ScreenIndex):gmatch \"(%w+)%s*,%s*(%w+)\" do\n        -- logMessage(\"comma found, setting screenIndex as \"..tonumber(a))\n        ScreenIndex = tonumber(a)\n        ID = b\n    end\nelse\n    -- ID = 0\nend\n\n\n\n--Colors[1] = {r=50/255,g=100/255,b=250/255}\n--Colors[2] = {r=5/255,g=29/255,b=190/255}\n--Colors[3] = {r=149/255,g=12/255,b=143/255}\n--Colors[4] = {r=132/255,g=0,b=0}\n--Colors[5] = {r=226/255,g=25/255,b=25/255}\n--Colors[6] = {r=1,g=128/255,b=0}\n--Colors[7] = {r=1,g=200/255,b=27/255}\n--Colors[8] = {r=1,g=204/255,b=153/255}\n--Colors[9] = {r=1,g=1,b=1}\n--Colors[10] = {r=0.137,g=0.122,b=0.125}\n--Colors[11] = {r=0,g=0,b=0}\n--Colors[12] = {r=50/255,g=116/255,b=52/255}\n\n\nlocal BackgroundImages = {}\nBackgroundImages[1] = \"assets.prod.novaquark.com/61625/916a89d6-4103-4b28-9a48-04575d9a2b2b.png\"\nBackgroundImages[2] = \"assets.prod.novaquark.com/61625/bcacc064-8bd6-42d5-a9fd-8c91be03f114.jpg\"\nBackgroundImages[3] = \"assets.prod.novaquark.com/61625/d3fb78ed-90bd-4b2e-945a-7bbed92932e2.png\"\nBackgroundImages[4] = \"assets.prod.novaquark.com/61625/cc4a68e2-39c5-463e-9593-c174a4d41175.jpg\"\nBackgroundImages[5] = \"assets.prod.novaquark.com/61625/ae249dff-af47-410a-b9f7-9d8db6f5aaed.jpg\"\nBackgroundImages[6] = \"assets.prod.novaquark.com/61625/f6b19848-ceb8-4c8f-8b97-03c684c29c47.jpg\"\nLayout = 1\nlocal Layouts = {}\nLayouts[Layout] = {0.22,0.096,0.5,0.38,1,1,0.53,0.096,0.22,0.71,0.53,0.71}   \n\n--color1 = {r=50/255,g=100/255,b=250/255}\n--color2 = {r=1,g=204/255,b=153/255}\n--fontColor = {r=1,g=1,b=1}\n--_background = \"assets.prod.novaquark.com/61625/916a89d6-4103-4b28-9a48-04575d9a2b2b.png\"\n--SelectionBackground =  {r=0,g=0,b=0}\n--SelectionOpacity = 0.2\n\nlocal state = \"\"\n\n--local Pie=createLayer()\nlocal D=createLayer()\nlocal E=createLayer()\nlocal F=createLayer()\nlocal G=createLayer()\nlocal H=createLayer()\n\nlocal rx,ry=getResolution() \nlocal cx,cy=getCursor()\n\nlocal BiggestFont = loadFont(\"Play-Bold\", 30)\nlocal BiggerFont = loadFont(\"Play-Bold\", 24) \nlocal NormalFont = loadFont(\"RobotoCondensed\", 20) \nlocal SmallerFont = loadFont(\"Play-Bold\", 18) \nlocal SmallestFont = loadFont(\"RobotoCondensed\", 15)\n\n-------------------------------------------------------------\n-- FUNCTIONS --\n\nfunction DrawFrame(X,Y,Width,Height)\n    X = X - Width/2 -- centering\n    xo = 20 -- offset x for curve\n    yo = 20 -- offset y for curve\n    addLine(D, X, Y, X+Width,Y)-- top line\n    addLine(D, X, Y+Height, X+Width,Y+Height)-- bottom line\n    addLine(D,X,Y , X-xo, Y-yo)-- top left curve\n    addLine(D,X-xo, Y-yo , X-Width/4-xo, Y-yo)-- top left line\n    addLine(D,X-Width/4-xo, Y-yo , X-Width/4-xo-xo, Y)-- top left corner curve\n    addLine(D,X-Width/4-xo-xo, Y, X-Width/4-xo-xo, Y+Height)-- left line\n    addLine(D,X+Width+xo+Width/4+xo, Y, X+Width+xo+Width/4+xo, Y+Height)-- right line\n    addLine(D,X+Width,Y, X+Width+xo, Y-yo)-- top right curve\n    addLine(D,X+Width+xo, Y-yo , X+Width+xo+Width/4, Y-yo)-- top right line\n    addLine(D,X+Width+xo+Width/4, Y-yo , X+Width+xo+Width/4+xo, Y)-- top right corner curve\n    addLine(D,X+Width+xo+Width/4+xo, Y+Height , X+Width+xo+Width/4+xo-xo, Y+Height+yo)-- bottom right curve\n    addLine(D,X+Width+xo+Width/4+xo-xo, Y+Height+yo , X+Width+xo+xo-xo, Y+Height+yo)-- bottom right line\n    addLine(D,X+Width+xo+xo-xo, Y+Height+yo , X+Width+xo+xo-xo-xo, Y+Height+yo-yo)-- top right corner curve\n    addLine(D,X-Width/4-xo-xo, Y+Height , X-Width/4-xo-xo+xo, Y+Height+yo)-- bottom left curve\n    addLine(D,X-Width/4-xo-xo+xo, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4, Y+Height+yo)-- bottom left line\n    addLine(D,X-Width/4-xo-xo+xo+Width/4, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4+xo, Y+Height+yo-yo)-- bottom left corner curve\nend\n\n\n\nfunction reformatInt(i)\n    return tostring(i):reverse():gsub(\"%d%d%d\", \"%1 \"):reverse():gsub(\"^,\", \"\")\nend\n\nfunction MakeButtonClickable(X,Y,Width,Height,TargetIndex) -- func to replace with click\n\n    if cx > X and cx < X+Width and cy > Y-5 and cy < Y+Height+10 then \n\n        setNextFillColor(D,SelectionBackground.r,SelectionBackground.g,SelectionBackground.b,SelectionOpacity) -- box background\n        addBox(D,X-30,Y-15,Width+30,Height+40)\n        setDefaultStrokeColor(D, Shape_Line, color2.r, color2.g, color2.b, 1)\n        local l=20\n        setDefaultStrokeWidth(D, Shape_Line, 1)\n        addLine(D,X-30,Y-15,X-30+l,Y-15)\n        addLine(D,X-30,Y-15,X-30,Y-15+l)\n        addLine(D,X+Width,Y-15,X+Width-l,Y-15)\n        addLine(D,X+Width,Y-15,X+Width,Y-15+l)\n        addLine(D,X+Width,Y+Height+25,X+Width-l,Y+Height+25)\n        addLine(D,X+Width,Y+Height+25,X+Width,Y+Height+25-l)\n        addLine(D,X-30,Y+Height+25,X-30+l,Y+Height+25)\n        addLine(D,X-30,Y+Height+25-l,X-30,Y+Height+25)\n        setDefaultStrokeWidth(D, Shape_Line, 3)\n        setDefaultStrokeColor(D, Shape_Line, color1.r, color1.g, color1.b, 1)\n\n        if getCursorReleased() then           \n            ScreenIndex = TargetIndex\n            setOutput(ScreenIndex)                    \n        end\n    end \n\nend\n\nfunction DrawSmallBox(Index,X,Y,Title,TableList,Count,ShowWeight,Weight,TargetIndex)\n    local Width = rx*0.28\n    local Height = 110\n\n    if Count == false then\n        Count = \"\"\n    else\n        Count = \" (\" .. Count .. \")\"\n    end\n\n    AddText(AlignH_Right,fontColor,SmallerFont,Title..Count,X+Width*0.88,Y+10)\n    \n    addLine(D, X+5, Y+28, X+Width*0.91, Y+28)\n    addLine(D, X+Width*0.91, Y+28,X+Width*0.91, Y+2 )\n    addLine(D, X+5, Y+28, X+5, Y+Height*0.91)    \n    local YY = Y+52\n    totalweight = 0\n\n    if ShowWeight == 1 then\n        AddText(AlignH_Left,fontColor,SmallerFont,Weight .. \"T\",X-5,Y+Height+10)  \n    end\n\n    if type(TableList) == \"table\" then\n        if #TableList > 3 then  \n            max = 3\n        else\n            max = #TableList\n        end\n        for i = 1,max do \n            if tonumber(TableList[i].l) ~= nil then\n                la = Labels[TableList[i].l]\n            else\n                la = TableList[i].l\n            end\n            setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n            addText(D, NormalFont, la .. \": \" .. math.floor(TableList[i].w) .. \" tons\" , X+16, YY)\n            YY = YY+25\n        end\n    end\n    if TargetIndex > 0 then\n        MakeButtonClickable(X,Y,Width,Height,TargetIndex)\n    end\n\nend\n\nfunction Click(X,Y,Width,Height)\n    if cx > X-Width*0.5 and cx < X+Width*0.5 and cy > Y-Height*0.5 and cy < Y+Height*0.5 then  \n        DrawSelection(X,Y,Width,Height)\n        if getCursorReleased() then\n            return true\n        end\n    end\nend\n\nfunction DrawCircleButton(X,Y,Size,Rotation)\n    setNextRotationDegrees(D, Rotation)\n    setNextFillColor(D, color2.r, color2.g, color2.b, 1) \n    if Rotation == 90 then\n        addTriangle(D, X+52, Y+55, X+52-Size, Y+55+Size*2, X+52+Size, Y+55+Size*2)\n    else\n        addTriangle(D, X+46, Y+55, X+46-Size, Y+55+Size*2, X+46+Size, Y+55+Size*2)\n    end\n    setNextFillColor(D, color1.r, color1.g, color1.b, 1)\n    addCircle(D, X+50, Y+70, Size*2+4)\n    setNextFillColor(D, 0, 0, 0, 1)\n    addCircle(D, X+50, Y+70, Size*2)\nend\n\nfunction DrawBackButton(X,Y,Width,Height,TargetIndex) \n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D,BiggestFont, \"Back\", X+Width*0.7,Y+Height*1.9)\n    DrawCircleButton(X,Y,15,-90)\n    MakeButtonClickable(X+40,Y+44,Width,Height,TargetIndex)\nend\n\nfunction DrawNextButton(X,Y,Width,Height,TargetIndex)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D,BiggestFont, \"Next\", X+18,Y+Height*1.9)\n    DrawCircleButton(X+Width*0.59,Y,15,90)\n    MakeButtonClickable(X+40,Y+44,Width,Height,TargetIndex)\nend\n\nfunction DrawProgressBar(X,Y,Width,Height,Max,Current,text1,text2,Font)    \n    setNextStrokeWidth(D, 1) \n    setNextStrokeColor(D,color2.r, color2.g, color2.b, 1)\n    setNextFillColor(D, 0,0,0, 1)\n    addBoxRounded(D,X-Width/2,Y,Width,Height,5)\n    AddText(AlignH_Right,fontColor,Font, text1, X-Width/2-20,Y+Height/2)\n    AddText(AlignH_Left,fontColor, Font,text2, X+Width/2+20,Y+Height/2)\n    setNextFillColor(D, color1.r, color1.g, color1.b, 1)\n    addBoxRounded(D,X-Width/2+5,Y+5,Current*Width/Max-10,Height-10,5)\nend\n\n\n\nfunction DrawSelection(X,Y,Width,Height)\n    setNextFillColor(D,SelectionBackground.r,SelectionBackground.g,SelectionBackground.b,SelectionOpacity) -- box background\n    addBox(D,X-Width*0.5,Y-Height*0.5,Width,Height)\n    setDefaultStrokeColor(D, Shape_Line, color2.r, color2.g, color2.b, 1)\n    local l=10\n    addLine(D,X-Width*0.5,Y-Height*0.5,X-Width*0.5+l,Y-Height*0.5)\n    addLine(D,X-Width*0.5,Y-Height*0.5,X-Width*0.5,Y-Height*0.5+l)\n    addLine(D,X+Width*0.5,Y-Height*0.5,X+Width*0.5-l,Y-Height*0.5)\n    addLine(D,X+Width*0.5,Y-Height*0.5,X+Width*0.5,Y-Height*0.5+l)\n    addLine(D,X+Width*0.5,Y+Height*0.5,X+Width*0.5-l,Y+Height*0.5)\n    addLine(D,X+Width*0.5,Y+Height*0.5,X+Width*0.5,Y+Height*0.5-l)\n    addLine(D,X-Width*0.5,Y+Height*0.5,X-Width*0.5+l,Y+Height*0.5)\n    addLine(D,X-Width*0.5,Y+Height*0.5-l,X-Width*0.5,Y+Height*0.5)\n    setDefaultStrokeColor(D, Shape_Line, color1.r, color1.g, color1.b, 1)\nend\n\nfunction AddText(align,color,font,text,x,y)\n    setNextTextAlign(H, align, AlignV_Middle)\n    setNextFillColor(H, color.r, color.g, color.b, 1)  \n    addText(H, font, text, x,y) \nend\n\nfunction DrawFrame1(X,Y,Width,Height)\n    setNextStrokeWidth(D,3)\n    setNextStrokeColor(D, color1.r, color1.g, color1.b, 1)\n    setNextFillColor(D, Colors[SelBackground].r, Colors[SelBackground].g, Colors[SelBackground].b, SelectionOpacity)\n    addBoxRounded(D,X-390,Y-Height/2-5,Width+500,Height+10,2)\nend\n\nfunction DrawPieSZ(X,Y,Size,Current,Max,Text,TankType,Font)\n    vw,vh,x1,x2,y1,y2 = rx/Size,ry/Size,0.5,0.6,25,30\n    Data = math.floor(100/Max*Current)\n    text = Text or \"\"\n    Font = Font or BiggerFont\n    AddText(AlignH_Center,fontColor,Font,Data..\"%\",X+vw,Y)\n    AddText(AlignH_Center,fontColor,SmallestFont,text,X+vw,10+36*vh+Y)\n    color = color1\n    if type(TankType) == 'string' then\n        if string.match(TankType, \"Atmospheric\") then\n            color = {r=0.2,g=0.2,b=1.2}\n        elseif string.match(TankType, \"Space\") then\n            color = {r=1.2,g=0.1,b=0.1}\n        elseif string.match(TankType, \"Rocket\") then\n            color = {r=0.1,g=1,b=0.1}\n        end\n        setDefaultStrokeColor(G, Shape_Line, color.r, color.g, color.b, 1)\n        addLine(G,X+vw-40,22+36*vh+Y,X+vw+40,22+36*vh+Y)\n    end\n    for ii = 0,360*Data/100,7.2 do\n        theta = 180 + ii;setNextFillColor(G,color1.r,color1.g,color1.b,1)\n        addQuad(G,X+vw - (-x2*vw*math.cos(math.rad(theta))+y2*vh*math.sin(math.rad(theta))),Y+vh - (-x2*vw*math.sin(math.rad(theta))-y2*vh*math.cos(math.rad(theta))),X+vw - (x2*vw*math.cos(math.rad(theta))+y2*vh*math.sin(math.rad(theta))),Y+vh - (x2*vw*math.sin(math.rad(theta))-y2*vh*math.cos(math.rad(theta))),X+vw - (x1*vw*math.cos(math.rad(theta))+y1*vh*math.sin(math.rad(theta))),Y+vh - (x1*vw*math.sin(math.rad(theta))-y1*vh*math.cos(math.rad(theta))),X+vw - (-x1*vw*math.cos(math.rad(theta))+y1*vh*math.sin(math.rad(theta))),Y+vh - (-x1*vw*math.sin(math.rad(theta))-y1*vh*math.cos(math.rad(theta))))\n    end\n    for ii = math.floor(360*Data/(7.2*100))*7.2,359,7.2 do\n        theta = 180 + ii;setNextFillColor(G,0.1,0.1,0.1,1)\n        addQuad(G,X+vw - (-x2*vw*math.cos(math.rad(theta))+y2*vh*math.sin(math.rad(theta))),Y+vh - (-x2*vw*math.sin(math.rad(theta))-y2*vh*math.cos(math.rad(theta))),X+vw - (x2*vw*math.cos(math.rad(theta))+y2*vh*math.sin(math.rad(theta))),Y+vh - (x2*vw*math.sin(math.rad(theta))-y2*vh*math.cos(math.rad(theta))),X+vw - (x1*vw*math.cos(math.rad(theta))+y1*vh*math.sin(math.rad(theta))),Y+vh - (x1*vw*math.sin(math.rad(theta))-y1*vh*math.cos(math.rad(theta))),X+vw - (-x1*vw*math.cos(math.rad(theta))+y1*vh*math.sin(math.rad(theta))),Y+vh - (-x1*vw*math.sin(math.rad(theta))-y1*vh*math.cos(math.rad(theta))))\n    end\n    setNextFillColor(G,0,0,0,0);setNextStrokeColor(G,color1.r,color1.g,color1.b,1)\n    setNextStrokeWidth(G,0.5*vh);addCircle(G,X+vw,Y+vh,23*vh)\n    setNextFillColor(G,0,0,0,0);setNextStrokeColor(G,color1.r,color1.g,color1.b,1)\n    setNextStrokeWidth(G,0.5*vh);addCircle(G,X+vw,Y+vh,31.5*vh)\nend\n\n\n\nfunction VerticalGaugeSZ(Percent,X,Y,SX,SY,n,text1,text2)\n    Height = math.ceil(Percent/(100/n))\n    vw = rx/100\n    vh = ry/100\n    for jj = 1,Height,1 do\n        setNextFillColor(D,color1.r,color1.g,color1.b,1)\n        addQuad(D,X - SX/2,Y+SY/2 - (jj-1)*SY/n - SY/n*0.2,X - SX/2,Y+SY/2 - (jj-1)*SY/n - SY/n*0.8,X + SX/2,Y+SY/2 - (jj-1)*SY/n - SY/n*0.8,X + SX/2,Y+SY/2 - (jj-1)*SY/n - SY/n*0.2)\n    end\n    for jj = Height,n,1 do\n        setNextFillColor(D,0.1,0.1,0.1,0.6)\n        addQuad(D,X - SX/2,Y+SY/2 - (jj-1)*SY/n - SY/n*0.2,X - SX/2,Y+SY/2 - (jj-1)*SY/n - SY/n*0.8,X + SX/2,Y+SY/2 - (jj-1)*SY/n - SY/n*0.8,X + SX/2,Y+SY/2 - (jj-1)*SY/n - SY/n*0.2)\n    end\n    setNextStrokeColor(D,color1.r,color1.g,color1.b,1)\n    setNextStrokeWidth(D,0.3*vh)\n    setNextFillColor(D,0,0,0,0.8)\n    addBoxRounded(D, X - SX/2 - vh, Y - SY/2 - vh, SX + 2*vh, SY + 2*vh, 1*vh)\n    AddText(AlignH_Center,fontColor,SmallestFont,text1,X,Y+SY*0.6+15)\n    AddText(AlignH_Center,fontColor,SmallestFont,text2,X,Y+SY*0.6+35)\nend\n\nfunction HorizontalGaugeSZ(Percent,X,Y,SX,SY,n,text1,text2)\n    vw = rx/100\n    vh = ry/100\n    for jj = 1,n,1 do\n        if jj < math.ceil(Percent/(100/n)) then setNextFillColor(E,color1.r,color1.g,color1.b,1) else setNextFillColor(E,0.1,0.1,0.1,0.6) end\n        addBox(E,X - SX/1.86+jj*(SX/n),Y-SY/2,SX/n*0.7,SY)\n    end\n    setNextStrokeColor(D,color1.r,color1.g,color1.b,1)\n    setNextStrokeWidth(D,0.3*vh)\n    setNextFillColor(D,0,0,0,0.8)\n    addBoxRounded(D, X - SX/2 - vh, Y - SY/2 - vh, SX + 2*vh, SY + 2*vh, 1*vh)\n    AddText(AlignH_Right,fontColor,SmallerFont, text1, X-SX*0.6,Y)\n    AddText(AlignH_Left,fontColor,SmallerFont,text2, X+SX*0.6,Y)\n\nend\n\n\n\n\n-------------------------------------------------------------\n-- BACKGROUND --\n\nif _background ~= \"\" then\nlocal background = loadImage(_background)\naddImage(D, background, 0, 0, rx, ry,0.2)\nend\n\n\n\nsetDefaultStrokeColor(D, Shape_Line, color1.r, color1.g, color1.b, 1)\nsetDefaultStrokeWidth(D, Shape_Line, 8)\n\nDrawFrame(rx/2,33,rx-420,ry-65)\n\nsetDefaultStrokeWidth(D, Shape_Line, 3)\n\n-------------------------------------------------------------\n-- BOTTOM SCREEN INFOS --\n\ncount = count or 0\noldinput = oldinput or \"\"\nlocal newinput = math.floor(getInput())\n\nif oldinput == newinput then\n    count = count +1\nelse\n    oldinput = newinput\n    count = 0\nend\n\n\nif count > 6 then\n    count = 6\n    state = \" - Script Not Running\" \n        local Size = 8\n        local X = rx*0.65\n        local Y4 = ry*0.96\n        setNextFillColor(D, 247/255, 170/255, 16/255, 1) \n        addTriangle(D, X, Y4, X-Size, Y4+Size*2, X+Size, Y4+Size*2)\n        setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n        addText(D, NormalFont, \"!\", X-Size/2.85,Y4+Size*2)\n\n        local Size = 8\n        local X = rx*0.35\n        local Y4 = ry*0.96\n        setNextFillColor(D, 247/255, 170/255, 16/255, 1) \n        addTriangle(D, X, Y4, X-Size, Y4+Size*2, X+Size, Y4+Size*2)\n        setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n        addText(D, NormalFont, \"!\", X-Size/2.85,Y4+Size*2)\nend\n\nAddText(AlignH_Center,fontColor,SmallestFont, \"SHIP INFO v\" .. version .. state, rx/2, ry*0.975)\n\n\n\n-------------------------------------------------------------\n-- INDEX 1 --\nif ScreenIndex == 1 then\n\n    AddText(AlignH_Center,fontColor,SmallestFont, \"MAIN SCREEN\", rx/2, ry*0.025)\n\n    -----------------\n    -- 1 SHIP INFO --\n    -----------------\n\n    local X1 = rx*Layouts[Layout][1]\n    local Y1 = ry*Layouts[Layout][2]\n    local Width = rx*0.28\n    local Height = 110\n\n    DrawSmallBox(0,X1,Y1,ShipName,0,false,0,0,1)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, NormalFont, \"Fuel: \"..reformatInt(math.floor(TankTotalWeight/1000))..\" tons\", X1+30,Y1+52)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, NormalFont, \"Cargo: \"..reformatInt(HubTotalWeight)..\" tons\", X1+30,Y1+75)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggerFont, \"Total: \"..reformatInt(math.floor(ShipMass/1000))..\" tons\", X1+28,Y1+105)\n\n    -----------------\n    -- 2 HUB VBARS --\n    -----------------\n \n    local W = 30 --! used for X2 calculation\n    local X2 = rx*Layouts[Layout][3]-(#HubData*75)-W*2.5\n    local Y2 = ry*Layouts[Layout][4]\n\n    MakeButtonClickable(150+X2-60,Y2,#HubData*151,140,3)\n    for i = 1, #HubData do    \n        X2 = X2+150\n        --DrawVProgressBar(X2,Y2,W,120,HubData[i].m,HubData[i].v,HubData[i].l,math.floor(HubData[i].v*100/HubData[i].m)..\"%   (\"..HubData[i].w..\" tons)\")\n        Data = math.floor(HubData[i].v*100/HubData[i].m)\n        VerticalGaugeSZ(Data,X2,Y2*1.25,W,100,12,HubData[i].l,Data..\"%   (\"..HubData[i].w..\" tons)\")\n    end\n\n    -------------------\n    -- 3 FUEL GAUGES --\n    -------------------\n\n    local X31 = 85\n    local X32 = X31 + 780\n    s = #FuelData*80\n    if #FuelData < 9 then s = #FuelData*66 end\n    if #FuelData < 5 then s = 400 end\n    MakeButtonClickable(X32,50,100,ry-110,4)\n    MakeButtonClickable(X31,50,100,ry-110,4)\n    for i = 1, #FuelData do        \n        if i-1 == math.floor(#FuelData/2) or i == 1 then\n            if #FuelData < 3 then Y = ry*0.5 elseif #FuelData < 5 then Y = ry*0.3 else Y = ry*0.16-#FuelData*2 end\n        end\n        if i > #FuelData/2 then X = 120 else X = 900 end\n        DrawPieSZ(X,Y,s,FuelData[i].v,FuelData[i].m,FuelData[i].l,FuelData[i].t,SmallestFont)\n        if #FuelData < 5 then Y = Y + ry*0.3 else Y = Y + ry*0.8/#FuelData*2 end\n        \n    end\n\n    ------------------------\n    -- 4 DAMAGED ELEMENTS --\n    ------------------------\n\n    local X4 = rx*Layouts[Layout][7]\n    local Y4 = ry*Layouts[Layout][8]\n\n    Width = rx*0.36\n\n    DrawSmallBox(2,X4,Y4,\"Damaged Elements\",0,BrokenCount+DamagedCount,0,0,2)\n\n    if tonumber(TotalMaxHitPoints) ~= tonumber(TotalHitPoints) then -- triangle warning\n        local Size = 10\n        local X = X4 + rx*0.026\n        setNextFillColor(D, 247/255, 170/255, 16/255, 1) \n        addTriangle(D, X, Y4, X-Size, Y4+Size*2, X+Size, Y4+Size*2)\n        setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n        addText(D, BiggerFont, \"!\", X-Size/2.85,Y4+Size*2)\n    end\n\n    HorizontalGaugeSZ(TotalHitPoints*100/TotalMaxHitPoints,X4 + rx*0.144,Y4+60,200,20,22,\"\",\"\")\n\n    --DrawProgressBar(X4 + rx*0.145,Y4+45,200,26,TotalMaxHitPoints,TotalHitPoints,\"\",\"\",BiggerFont)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggerFont, reformatInt(math.floor(TotalHitPoints))..\" Hit Points\", X4 + rx*0.145,Y4+95)\n\n    local X5 = rx*Layouts[Layout][9]\n    local Y5 = ry*Layouts[Layout][10]\n\n    DrawSmallBox(0,X5,Y5,\"Docked Constructs\",DockedData,#DockedData,1,reformatInt(math.floor(DockedTotalWeight/1000)),5)\n    \n    local X6 = rx*Layouts[Layout][11]\n    local Y6 = ry*Layouts[Layout][12]\n    DrawSmallBox(0,X6,Y6,\"Boarded Players\",BoardedData,#BoardedData,1,reformatInt(math.floor(PlayerTotalWeight/1000)),6)\n\n\n    -------------------------------------------------------------\n    -- INDEX 2 -- DAMAGED ELEMENTS DETAILS\nelseif ScreenIndex == 2 or string.find(ScreenIndex, \"2,\") then\n\n\n\n\n\n    AddText(AlignH_Center,fontColor,SmallestFont,\"REPAIR SCREEN\",rx/2, ry*0.025)\n    if state == \"\" then\n    cc = cc or 1\n    cc = cc+1\n    \n    AddText(AlignH_Left,fontColor,NormalFont,\"Scanning Ship\", rx-175,ry-30)\n\n    if cc > 2 then AddText(AlignH_Left,fontColor,NormalFont,\"Scanning Ship.\", rx-175,ry-30) end\n    if cc > 6 then AddText(AlignH_Left,fontColor,NormalFont,\"Scanning Ship..\", rx-175,ry-30) end\n    if cc > 10 then AddText(AlignH_Left,fontColor,NormalFont,\"Scanning Ship...\", rx-175,ry-30) end\n    if cc>14 then cc = 1 end\n    end\n    X = rx*0.48\n\n    Y = 40\n    DrawPieSZ(rx*0.12,Y+340,250,TotalHitPoints,TotalMaxHitPoints)\n    AddText(AlignH_Left,fontColor,BiggestFont,ShipName,rx*0.05,Y+110)\n    AddText(AlignH_Left,fontColor,NormalFont,reformatInt(math.floor(MaxCCS))..\" Max CCS\",rx*0.05,Y+160)\n    AddText(AlignH_Left,fontColor,NormalFont,reformatInt(math.floor(TotalMaxHitPoints))..\" Max Hit Points\",rx*0.05,Y+200)\n    AddText(AlignH_Left,fontColor,NormalFont,reformatInt(math.floor(TotalHitPoints))..\" Hit Points\", rx*0.05,Y+230)\n    AddText(AlignH_Left,fontColor,NormalFont,reformatInt(math.floor(DamagedCount))..\" Damaged Elements\", rx*0.05,Y+460)\n    AddText(AlignH_Left,fontColor,NormalFont,reformatInt(math.floor(BrokenCount))..\" Broken Elements\", rx*0.05,Y+490)\n    DrawBackButton(25,10,135,43,1)\n\n    --X = 650\n    Y = 10\n    if type(DamagedElements) == 'table' then\n        if #DamagedElements > 0 then\n\n            Size=20\n\n            setDefaultStrokeColor(D, Shape_Line, color2.r, color2.g, color2.b, 1)\n\n           \n            for i=1, #DamagedElements do\n\n                if (i % 2 == 0) then --it is even\n                    X = 450   \n                    \n                else --it is odd\n                    X = 800  \n                    Y=Y+65\n\n                end\n\n                AddText(AlignH_Center,fontColor,SmallestFont,DamagedElements[i].l..\" (\"..DamagedElements[i].r..\"/\"..DamagedElements[i].rm..\")\", X,Y)\n\n    HorizontalGaugeSZ(DamagedElements[i].w*100/DamagedElements[i].m,X,Y+30,230,15,24,\"\",\"\")\n\n\n                --DrawProgressBar(X,Y+20,230,15,DamagedElements[i].m,DamagedElements[i].w,\"\",\"\",BiggerFont)\n                --MakeButtonClickable(X-105,Y-5,240,30,\"2,\"..DamagedElements[i].id)\n            end\n        else\nif TotalMaxHitPoints > TotalHitPoints then \n   setOutput(ScreenIndex)   -- added to force check\nAddText(AlignH_Center,fontColor,BiggestFont, \"SHIP DAMAGED\", rx/2,ry/2)\nAddText(AlignH_Center,fontColor,SmallerFont, \"Start script to update screen\", rx/2,ry/2+50)\nelse\n            \n            AddText(AlignH_Center,fontColor,BiggestFont, \"SHIP UNDAMAGED\", rx/2,ry/2)\nend\n            addLine(D,rx/2-150,ry/2+30,rx/2+150,ry/2+30)\n            addLine(D,rx/2-160,ry/2-30,rx/2+160,ry/2-30)\n        end\n    end\n    -------------------------------------------------------------\n    -- INDEX 3 -- HUBS SCREEN\n\nelseif ScreenIndex == 3 then\n\n    X = rx*0.5\n    Y = ry*0.1701\n    AddText(AlignH_Center,fontColor,BiggestFont,#HubData..\" Container Hubs\",X, Y+6)\n\n    addLine(D,X-210, Y+30,X+210, Y+30)\n    addLine(D,X-210, Y+30,X-210, Y+30-45)\n\n    Y = ry*0.825\n    addLine(D,X-230, Y-28,X+230, Y-28)\n    addLine(D,X+230, Y-28,X+230, Y-28+45)\n\n    AddText(AlignH_Center,fontColor,BiggestFont,\"Total Hubs Weight: \"..math.floor(HubTotalWeight)..\" tons\", X, Y-4)\n    AddText(AlignH_Center,fontColor,SmallestFont, \"HUBS SCREEN\", rx/2, ry*0.025)\n\n    X = rx*0.5\n    Y = ry*0.1\n    Width = 400\n    Height = 40\n\n    if #HubData < 5 then\n        Y = ry*0.35-(ry*0.06*#HubData)\n    end\n\n    for i = 1, #HubData do\n        Y = Y+80\n\n    HorizontalGaugeSZ(math.floor(HubData[i].v*100/HubData[i].m),X,Y+30,Width,Height,24,HubData[i].l,math.floor(HubData[i].v*100/HubData[i].m)..\"%    (\"..HubData[i].w..\" tons)    \" .. math.floor(HubData[i].v/1000) ..\"/\"..math.floor(HubData[i].m/1000)..\"Kl\")\n\n\n        --DrawProgressBar(X,Y,Width,Height,HubData[i].m,HubData[i].v,HubData[i].l,\" \"..math.floor(HubData[i].v*100/HubData[i].m)..\"%    (\"..HubData[i].w..\" tons)    \" .. math.floor(HubData[i].v/1000) ..\"/\"..math.floor(HubData[i].m/1000)..\"Kl\",NormalFont)\n    end\n\n    DrawBackButton(25,10,135,43,1)\n    DrawNextButton(rx-210,10,135,43,31)\n\n    -------------------------------------------------------------\n    -- INDEX 31 --\n\nelseif ScreenIndex == 31 then\n\n    DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n    AddText(AlignH_Center,fontColor,BiggestFont, HubData[1].l, rx*0.5,ry*0.17)\n\n    DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[1].m,HubData[1].v,math.floor(HubData[1].v*100/HubData[1].m)..\"%\",math.floor(HubData[1].v/1000) ..\"/\"..math.floor(HubData[1].m/1000)..\"Kl\",NormalFont)\n    AddText(AlignH_Center,fontColor,BiggestFont,HubData[1].w..\" tons\", rx*0.5,ry*0.88)\n\n    local X=25\n    local Y=10\n    local Width=135\n    local Height=43\n    if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawBackButton(X,Y,Width,Height,3) end\n\n    if #HubData > 1 then\n        local X=rx-210\n        if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawNextButton(X,Y,Width,Height,32) end\n    end\n\n\n    -------------------------------------------------------------\n    -- INDEX 32 --\n\nelseif ScreenIndex == 32 then\n    DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n    AddText(AlignH_Center,fontColor,BiggestFont, HubData[2].l, rx*0.5,ry*0.17)\n\n    DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[2].m,HubData[2].v,math.floor(HubData[2].v*100/HubData[2].m)..\"%\",math.floor(HubData[2].v/1000) ..\"/\"..math.floor(HubData[2].m/1000)..\"Kl\",NormalFont)\n    AddText(AlignH_Center,fontColor,BiggestFont,HubData[2].w..\" tons\", rx*0.5,ry*0.88)\n\n    local X=25\n    local Y=10\n    local Width=135\n    local Height=43\n    if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawBackButton(X,Y,Width,Height,31) end\n\n    if #HubData > 2 then\n        local X=rx-210\n        if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawNextButton(X,Y,Width,Height,33) end\n    end\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 33 --\n\nelseif ScreenIndex == 33 then\n    DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n    AddText(AlignH_Center,fontColor,BiggestFont, HubData[3].l, rx*0.5,ry*0.17)\n\n    DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[3].m,HubData[3].v,math.floor(HubData[3].v*100/HubData[3].m)..\"%\",math.floor(HubData[3].v/1000) ..\"/\"..math.floor(HubData[3].m/1000)..\"Kl\",NormalFont)\n    AddText(AlignH_Center,fontColor,BiggestFont,HubData[3].w..\" tons\", rx*0.5,ry*0.88)\n\n    local X=25\n    local Y=10\n    local Width=135\n    local Height=43\n    if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawBackButton(X,Y,Width,Height,32) end\n\n    if #HubData > 3 then\n        local X=rx-210\n        if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawNextButton(X,Y,Width,Height,34) end\n    end\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 34 --\n\nelseif ScreenIndex == 34 then\n    DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n    AddText(AlignH_Center,fontColor,BiggestFont,HubData[4].l, rx*0.5,ry*0.17)\n\n    DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[4].m,HubData[4].v,math.floor(HubData[4].v*100/HubData[4].m)..\"%\",math.floor(HubData[4].v/1000) ..\"/\"..math.floor(HubData[4].m/1000)..\"Kl\",NormalFont)\n    AddText(AlignH_Center,fontColor,BiggestFont,HubData[4].w..\" tons\", rx*0.5,ry*0.88)\n\n    local X=25\n    local Y=10\n    local Width=135\n    local Height=43\n    if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawBackButton(X,Y,135,43,33) end\n\n\n    -------------------------------------------------------------\n    -- INDEX 4 --\n\nelseif ScreenIndex == 4 then\n    AddText(AlignH_Center,fontColor,SmallestFont,\"FUEL SCREEN\", rx/2, ry*0.025)\n\n    X = rx*0.5\n    Y = ry*0.1701   \n    AddText(AlignH_Center,fontColor,BiggestFont,#FuelData..\" Fuel Tanks\",X, Y+6)\n\n    addLine(D,X-210, Y+30,X+210, Y+30)\n    addLine(D,X-210, Y+30,X-210, Y+30-45)\n\n    Y = ry*0.825\n    addLine(D,X-230, Y-28,X+230, Y-28)\n    addLine(D,X+230, Y-28,X+230, Y-28+45)\n\n    AddText(AlignH_Center,fontColor, BiggestFont, \"Total Fuel Weight: \"..math.floor(TankTotalWeight/1000)..\" tons\", X, Y-4)\n\n    -- if (i % 2 == 0) then --it is even\n    --   X = 280             \n    -- else --it is odd\n    -- X = 745     \n    -- end\n\n\n    rocket = 0\n    atmo = 0\n    space = 0\n    for i=1, #FuelData do\n        if string.match(FuelData[i].t,\"Space\") then\n            space = space +1\n        elseif string.match(FuelData[i].t,\"Atmospheric\") then\n            atmo = atmo +1\n        elseif string.match(FuelData[i].t,\"Rocket\") then\n            rocket = rocket +1\n        end\n    end\n \n    AddText(AlignH_Left,fontColor,NormalFont, space ..\" Space\", rx*0.72,ry*0.1+40)\n    AddText(AlignH_Left,fontColor,NormalFont, atmo ..\" Atmospheric\", rx*0.72,ry*0.1+65)\n    AddText(AlignH_Left,fontColor,NormalFont, rocket ..\" Rocket\", rx*0.72,ry*0.1+90)\n\n    if #FuelData > 6 then -- two rows\n        X = rx*0.35\n        Width = 120\n        Height = 15\n        Y = ry*0.25\n        O = 50-#FuelData\n\n        for i = 1, math.floor(#FuelData/2) do\n            Y = Y+O\n            --DrawProgressBar(X*0.90,Y,Width,Height,FuelData[i].m,FuelData[i].v,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\",SmallestFont)\nHorizontalGaugeSZ(math.floor(FuelData[i].v*100/FuelData[i].m),X*0.9,Y+30,Width,Height,24,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\")\n\n\n        end\n        Y = ry*0.25\n        for i = math.floor(#FuelData-#FuelData/2)+1, #FuelData do\n            Y = Y+O\n           -- DrawProgressBar(X*2.2,Y,Width,Height,FuelData[i].m,FuelData[i].v,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\",SmallestFont)\n\n    HorizontalGaugeSZ(math.floor(FuelData[i].v*100/FuelData[i].m),X*2.2,Y+30,Width,Height,24,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\")\n\n\n\n        end\n\n    else\n        X = rx*0.5\n        Width = 400\n        Height = 35-#FuelData*3\n        Y = ry*0.2\n        O = 78-#FuelData*5\n        for i = 1, #FuelData do    \n            Y = Y+O\n          --  DrawProgressBar(X,Y,Width,Height,FuelData[i].m,FuelData[i].v,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\",NormalFont)\nHorizontalGaugeSZ(math.floor(FuelData[i].v*100/FuelData[i].m),X,Y+30,Width,Height,24,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\")\n\n\n        end\n    end\n\n    DrawBackButton(25,10,135,43,1)\n\n    -------------------------------------------------------------\n    -- INDEX 5 -- DOCKED CONSTRUCTS SCREEN\n\nelseif ScreenIndex == 5 or ScreenIndex == 52 then\n    X = rx*0.5\n    Y = ry*0.1701\n    AddText(AlignH_Center,fontColor,SmallestFont, \"DOCKED CONSTRUCTS SCREEN\", X, ry*0.025)\n    AddText(AlignH_Center,fontColor,BiggestFont, \"Select construct to undock\",X, Y+6)\n\n    addLine(D,X-210, Y+30,X+210, Y+30)\n    addLine(D,X-210, Y+30,X-210, Y+30-45)\n    Y = ry*0.825\n    addLine(D,X-230, Y-28,X+230, Y-28)\n    addLine(D,X+230, Y-28,X+230, Y-28+45)\n    \n    AddText(AlignH_Center,fontColor,BiggestFont, \"Total Docked Weight: \"..math.floor(DockedTotalWeight/1000)..\" tons\", X, Y-4)\n\n    DrawBackButton(25,10,135,43,1)\n\n    Y=110\n    for i = 1, #DockedData do    \n\n        if (i % 2 == 0) then \n            X = 280   --it is even\n        else \n            X = 740  --it is odd\n            Y=Y+70\n        end\n\n        AddText(AlignH_Center,fontColor,BiggerFont, DockedData[i].l ..\" (\"..DockedData[i].w..\" tons)\", X,Y)\n\n        MakeButtonClickable(X-175,Y-20,380,30,\"51,\"..DockedData[i].id)\n\n    end\n\n\nelseif ScreenIndex == 51 then\n    DrawBackButton(25,10,135,43,5)\n    AddText(AlignH_Center,fontColor,BiggestFont, \"FORCE UNDOCK \" .. ID ..\" ?\", rx/2,ry*0.3)\n    AddText(AlignH_Center,fontColor,BiggestFont, \"CONFIRM\", rx/2,ry*0.5)\n\n    MakeButtonClickable(rx/2-175,ry*0.5-20,380,30,\"52,\"..ID)\n\n\n    -------------------------------------------------------------\n    -- INDEX 6 --\n\nelseif ScreenIndex == 6 or ScreenIndex == 62 then\n\n\n    X = rx*0.5\n    Y = ry*0.1701\n    AddText(AlignH_Center,fontColor,SmallestFont, \"BOARDED PLAYERS SCREEN\", X, ry*0.025)\n\n    AddText(AlignH_Center,fontColor,BiggestFont, \"Select player to deboard\",X, Y+6)\n\n    addLine(D,X-210, Y+30,X+210, Y+30)\n    addLine(D,X-210, Y+30,X-210, Y+30-45)\n    Y = ry*0.825\n    addLine(D,X-230, Y-28,X+230, Y-28)\n    addLine(D,X+230, Y-28,X+230, Y-28+45)\n    AddText(AlignH_Center,fontColor,BiggestFont, \"Total Players Weight: \"..math.floor(PlayerTotalWeight/1000)..\" tons\", X, Y-4)\n\n    DrawBackButton(25,10,135,43,1)\n\n    Y=110\n    for i = 1, #BoardedData do    \n\n        if (i % 2 == 0) then \n            X = 280   --it is even\n        else \n            X = 740  --it is odd\n            Y=Y+70\n        end\n\n        AddText(AlignH_Center,fontColor, BiggerFont, BoardedData[i].l ..\" (\"..BoardedData[i].w..\" tons)\", X,Y)\n        MakeButtonClickable(X-175,Y-20,380,30,\"61,\"..BoardedData[i].id)\n    end\n\nelseif ScreenIndex == 61 then\n    DrawBackButton(25,10,135,43,6)\n    AddText(AlignH_Center,fontColor,BiggestFont, \"FORCE DEBOARD \" .. ID ..\" ?\", rx/2,ry*0.3)\n    AddText(AlignH_Center,fontColor,BiggestFont, \"CONFIRM\", rx/2,ry*0.5)\n    MakeButtonClickable(rx/2-175,ry*0.5-20,380,30,\"62,\"..ID)\n\nend\n\n\n\nif debug then\n    setNextFillColor(D, 1, 0.1, 0.1, 1)\n    addText(D, SmallestFont, \"Loop:\"..Duration, rx*0.25,ry*0.984)\n    setNextFillColor(D, 1, 0.1, 0.1, 1)\n    addText(D, SmallestFont, \"Index:\"..ScreenIndex, rx/2+235,ry*0.984)\n    setNextFillColor(D, 1, 0.1, 0.1, 1)\n    addText(D, SmallestFont, \"ScreenId:\"..ScreenId, rx/2+145,ry*0.984)\n    setNextFillColor(D, 1, 0.1, 0.1, 1) \n    addText(D, SmallestFont, \"Rendering:\"..math.floor((getRenderCost()*100)/getRenderCostMax())..\"%\", rx/2.9, ry*0.984)\n    setNextFillColor(D, 1, 0.1, 0.1, 1) \n    addText(D, SmallestFont, \"Input:\"..#getInput()..\"/1024\", rx/1.8, ry*0.984)\nend\n\n\nrequestAnimationFrame(10) \n\n\n\n\n\n]]","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"15"}],"methods":[],"events":[]}
