{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"local HideUnit = false --export\nlocal version = 0.1\nsystem.print(\"--------------[ Simple Industry Monitor v\"..version..\" ]--------------\")\nif HideUnit then unit.hideWidget() end\n\nscreens = {}\ncontainers = {}\n\nlocal json = require(\"dkjson\")\n\nfor slot,element in pairs(unit)do -- checking elements in slots\n    if type(element)==\"table\"and type(element.export)==\"table\"then\n        if element.getClass then\n            if element.getClass()==\"ScreenUnit\" or element.getClass()==\"ScreenSignUnit\"then \n                screens[#screens+1]=element\n                element.activate()\n            elseif string.find(element.getClass(),\"CoreUnit\") then\n                core=element\n            elseif string.find(element.getClass(),\"Container\") then\n                containers[#containers+1]=element\n            end \n        end \n    end \nend\n\nunit.setTimer(\"upd\",1)\n\nindustry = {}\n\nlocal elements = core.getElementIdList() -- checking elements on core\n\nfor i = 1, #elements do\n    local ElementClass = core.getElementClassById(elements[i]) \n    if string.match(ElementClass, \"Industry\") then\n        name=core.getElementDisplayNameById(elements[i])  \n        if not string.match(name, \"Transfer\") then\n            industry[#industry+1]=elements[i]\n        end\n\n    end\n\n\nend\n\nfunction Split(s, delimiter)\n    result = {};\n    for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n        table.insert(result, match);\n    end\n    return result;\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"local json = require(\"dkjson\")\nlocal Schems,Ores,Ingredients = {},{},{}\nlocal Running,Pending,Stopped,Other = 0,0,0,0\n\nlocal screenVar = [[\nlocal Containers,Schems,Ores,Ingredients = {},{},{},{}\n]]\n\nfor i = 1, #containers do -- Oxygen & Hydrogen containers\n    screenVar = screenVar ..[[\n    Containers[#Containers+1]={n=']]..core.getElementNameById(containers[i].getLocalId())..[[',c=]]..containers[i].getItemsVolume()..[[,m=]]..containers[i].getMaxVolume()..[[}\n    ]]\nend\n\nfor i = 1, #industry do -- Checking machines\n\n    name = core.getElementDisplayNameById(industry[i]) \n    data = core.getElementIndustryInfoById(industry[i])\n    state = data.state\n\n    if state == 1 then\n        Stopped = Stopped +1\n\n    elseif state == 2 then\n        Running = Running +1\n\n    elseif state == 3 then\n        if string.match(name, \"Refiner\") then \n            Ores[#Ores+1]=system.getItem(data.currentProducts[1].id).displayNameWithSize..\" (\"..core.getElementNameById(industry[i])..\")\"\n        else\n            Ingredients[#Ingredients+1]=system.getItem(data.currentProducts[1].id).displayNameWithSize..\" (\"..name..\" [\"..industry[i]..\"])\" \n        end\n\n    elseif state == 4 or state == 5 then\n        Other = Other +1\n\n    elseif state == 6 then\n        Pending = Pending +1\n\n    elseif state == 7 and data.requiredSchematicIds[1] ~= nil then\n        Schems[#Schems+1]= system.getItem(data.requiredSchematicIds[1]).displayNameWithSize\n    end\n\nend\n\nscreenVar = screenVar .. \"local Total,Running,Pending,Stopped,Other = \"..#industry..\",\"..Running..\",\"..Pending..\",\"..Stopped..\",\"..Other..\" \"\n\ntable.sort(Schems, function(a,b) return a < b end) -- sorting table \n\nfor i=1, #Ingredients do\n    screenVar = screenVar .. \"Ingredients[#Ingredients+1]='\"..Ingredients[i]..\"'\" \nend\n\nlocal hash = {}\nfor _,v in ipairs(Schems) do\n    if (not hash[v]) then\n        screenVar = screenVar .. \"Schems[#Schems+1]='\"..v..\"'\" \n        hash[v] = true\n    end\nend\nfor _,v in ipairs(Ores) do\n    if (not hash[v]) then\n        screenVar = screenVar .. \"Ores[#Ores+1]='\"..v..\"'\" \n        hash[v] = true\n    end\nend\n\nlocal year, month, day, hour, minute, second, weekDayIndex, weekDayName, weekDayShortName, monthName, monthShortName, daysFromYearStart = DUCurrentDateTime()\nscreenVar = screenVar ..\"local LastUpdate='\"..string.format(\"%02d/%02d/%04d %02d:%02d:%02d\",day,month,year,hour,minute,second)..\"'\"\n\nfor key, screen in pairs(screens) do screen.setRenderScript(screenVar..screenContent) end\n\n","filter":{"args":[{"value":"upd"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"--[[\n    Jericho's time script -- https://github.com/Jericho1060\n    Display IRL date and time in game\n    https://github.com/Jericho1060/DualUniverse/edit/master/TimeScript/TimeScript.lua\n]]\nfunction DUCurrentDateTime(utc)\n    local t = system.getUtcTime()\n    if not utc then t = t + system.getUtcOffset() end\n    local DSEC=24*60*60\n    local YSEC=365*DSEC\n    local LSEC=YSEC+DSEC\n    local FSEC=4*YSEC+DSEC\n    local BASE_DOW=4\n    local BASE_YEAR=1970\n    local _days={-1, 30, 58, 89, 119, 150, 180, 211, 242, 272, 303, 333, 364}\n    local _lpdays={}\n    for i=1,2  do _lpdays[i]=_days[i]   end\n    for i=3,13 do _lpdays[i]=_days[i]+1 end\n    local y,j,m,d,w,h,n,s\n    local mdays=_days\n    s=t\n    y=math.floor(s/FSEC)\n    s=s-y*FSEC\n    y=y*4+BASE_YEAR\n    if s>=YSEC then\n        y=y+1\n        s=s-YSEC\n        if s>=YSEC then\n            y=y+1\n            s=s-YSEC\n            if s>=LSEC then\n                y=y+1\n                s=s-LSEC\n            else\n                mdays=_lpdays\n            end\n        end\n    end\n    j=math.floor(s/DSEC)\n    s=s-j*DSEC\n    local m=1\n    while mdays[m]<j do m=m+1 end\n    m=m-1\n    local d=j-mdays[m]\n    w=(math.floor(t/DSEC)+BASE_DOW)%7\n    if w == 0 then w = 7 end\n    h=math.floor(s/3600)\n    s=s-h*3600\n    n=math.floor(s/60)\n    function round(a,b)if b then return utils.round(a/b)*b end;return a>=0 and math.floor(a+0.5)or math.ceil(a-0.5)end\n    s=round(s-n*60)\n    local weekDaysNames = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"}\n    local weekDaysShortNames = {\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"}\n    local monthNames = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"}\n    local monthShortNames = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}\n    return y,m,d,h,n,s,w,weekDaysNames[w],weekDaysShortNames[w],monthNames[m],monthShortNames[m],j+1\nend\n\n--[[\n    local year, month, day, hour, minute, second, weekDayIndex, weekDayName, weekDayShortName, monthName, monthShortName, daysFromYearStart = DUCurrentDateTime()\n    system.print(string.format(\"%02d/%02d/%04d %02d:%02d:%02d\",day,month,year,hour,minute,second))\n]]","filter":{"args":[],"signature":"onStart()","slotKey":"-4"},"key":"2"},{"code":"screenContent = [[\n\n--------screenContent--------\n\n\n    local Layer = createLayer()\n    local E = createLayer()\n    local F = createLayer()\n    local H = createLayer()\n    local ImagesLayer = createLayer()\n    local rx, ry = getResolution()\n    local cx,cy=getCursor()\n\n    Index = Index or 1 \n\n    local json = require(\"dkjson\")\n    local input = json.decode(getInput())\n\n\n    local BiggestFont = loadFont(\"Play-Bold\", 50)\n    local NormalFont = loadFont('Play', 24)\n    local SmallFont = loadFont('RobotoCondensed', 18)\n    local SmallestFont = loadFont('RobotoCondensed', 14)\n    local fontColor = {r=1,g=1,b=1}\n\nlocal color1 = {r=255/255,g=255/255,b=250/255 } \nlocal color2 = {r=50/255,g=100/255,b=250/255 } \nlocal ContentFont = loadFont(\"Play\",24)\n\nfunction Get_State(str)\n    arr = {}\n    if str == 1 then  arr={\"Stopped\",{r=1,g=0.1,b=0.1}}\n    elseif str == 2 then arr={\"Running\",{r=0.1,g=1,b=0.1}}\n    elseif str == 3 then arr={\"Missing Ingredients\",{r=1,g=0.1,b=0.1}}\n    elseif str == 4 then arr={\"Output Full\",{r=1,g=1,b=0.1}}\n    elseif str == 5 then arr={\"No Output Container\",{r=1,g=0.1,b=0.1}}\n    elseif str == 6 then arr={\"Pending\",{r=0.1,g=1,b=0.1}}\n    elseif str == 7 then arr={\"Missing Schematics\",{r=1,g=0.1,b=0.1}}\n    end\n    return arr\nend\n\nfunction Get_Ore(str)\n    arr = {}\n \n    if string.match(str, \"Aluminium\") then arr={\"Bauxite\",\"resources_generated/env/voxel/ore/aluminium-ore/icons/env_aluminium-ore_icon.png\"}\n    elseif string.match(str, \"Carbon\") then arr={\"Coal\",\"resources_generated/env/voxel/ore/aluminium-ore/icons/env_aluminium-ore_icon.png\"}\n    elseif string.match(str, \"Silicon\") then arr={\"Quartz\",\"resources_generated/env/voxel/ore/silicon-ore/icons/env_silicon-ore_icon.png\"}\n    elseif string.match(str, \"Iron\") then arr={\"Hematite\",\"resources_generated/env/voxel/ore/iron-ore/icons/env_iron-ore_icon.png\"}\n    elseif string.match(str, \"Calcium\") then arr={\"Limestone\",\"resources_generated/env/voxel/ore/calcium-ore/icons/env_calcium-ore_icon.png\"}\n    elseif string.match(str, \"Chromium\") then arr={\"Chromite\",\"resources_generated/env/voxel/ore/chromium-ore/icons/env_chromium-ore_icon.png\"}\n    elseif string.match(str, \"Sodium\") then arr={\"Natron\",\"resources_generated/env/voxel/ore/sodium-ore/icons/env_sodium-ore_icon.png\"}\n    elseif string.match(str, \"Copper\") then arr={\"Malachite\",\"resources_generated/env/voxel/ore/copper-ore/icons/env_copper-ore_icon.png\"}\n    elseif string.match(str, \"Silver\") then arr={\"Acanthite\",\"resources_generated/env/voxel/ore/silver-ore/icons/env_silver-ore_icon.png\"}\n    elseif string.match(str, \"Lithium\") then arr={\"Petalite\",\"resources_generated/env/voxel/ore/lithium-ore/icons/env_lithium-ore_icon.png\"}\n    elseif string.match(str, \"Sulfur\") then arr={\"Pyrite\",\"resources_generated/env/voxel/ore/sulfur-ore/icons/env_sulfur-ore_icon.png\"}\n    else arr={\"No Match\",\"\"}\n    end\n    return arr\nend\n\n\nlocal Pie = createLayer()\n\nfunction DrawPie(X,Y,Size,Percent,Label)\n\n    vw = rx/Size\n    vh = ry/Size\n    x1 = 0.5\n    x2 = 0.6\n    y1 = 25\n    y2 = 30\n    \n        for ii = 0,360*Percent/100,7.2 do\n            theta = 180 + ii\n            setNextFillColor(Pie,color2.r,color2.g,color2.b,1)\n            addQuad(Pie,\n                X - (-x2*vw*math.cos(math.rad(theta))+y2*vh*math.sin(math.rad(theta))),\n                Y - (-x2*vw*math.sin(math.rad(theta))-y2*vh*math.cos(math.rad(theta))),\n                X - (x2*vw*math.cos(math.rad(theta))+y2*vh*math.sin(math.rad(theta))),\n                Y - (x2*vw*math.sin(math.rad(theta))-y2*vh*math.cos(math.rad(theta))),\n                X - (x1*vw*math.cos(math.rad(theta))+y1*vh*math.sin(math.rad(theta))),\n                Y - (x1*vw*math.sin(math.rad(theta))-y1*vh*math.cos(math.rad(theta))),\n                X - (-x1*vw*math.cos(math.rad(theta))+y1*vh*math.sin(math.rad(theta))),\n                Y - (-x1*vw*math.sin(math.rad(theta))-y1*vh*math.cos(math.rad(theta)))\n            )\n        end\n        for ii = math.floor(360*Percent/(7.2*100))*7.2,359,7.2 do\n            theta = 180 + ii\n            setNextFillColor(Pie,color2.r,color2.g,color2.b,0.1)\n            addQuad(Pie,\n                X - (-x2*vw*math.cos(math.rad(theta))+y2*vh*math.sin(math.rad(theta))),\n                Y - (-x2*vw*math.sin(math.rad(theta))-y2*vh*math.cos(math.rad(theta))),\n                X - (x2*vw*math.cos(math.rad(theta))+y2*vh*math.sin(math.rad(theta))),\n                Y - (x2*vw*math.sin(math.rad(theta))-y2*vh*math.cos(math.rad(theta))),\n                X - (x1*vw*math.cos(math.rad(theta))+y1*vh*math.sin(math.rad(theta))),\n                Y - (x1*vw*math.sin(math.rad(theta))-y1*vh*math.cos(math.rad(theta))),\n                X - (-x1*vw*math.cos(math.rad(theta))+y1*vh*math.sin(math.rad(theta))),\n                Y - (-x1*vw*math.sin(math.rad(theta))-y1*vh*math.cos(math.rad(theta)))\n            )\n        end\n\n        setNextFillColor(Pie,0,0,0,0)\n        setNextStrokeColor(Pie,0.1,0.1,0.1,1)\n        setNextStrokeWidth(Pie,0.5*vh)\n        addCircle(Pie,X,Y,23*vh)\n\n        setNextFillColor(Pie,0,0,0,0)\n        setNextStrokeColor(Pie,0.1,0.1,0.1,1)\n        setNextStrokeWidth(Pie,0.5*vh)\n        addCircle(Pie,X,Y,31.5*vh)\n       AddText(AlignH_Center,color2,SmallFont,Percent..\"%\",X,Y)\n       AddText(AlignH_Left,color1,NormalFont,Label,X+x2*vw*40,Y)\nend\n\n\n\nfunction AddText(align,color,font,text,x,y)\n    setNextTextAlign(Layer, align, AlignV_Middle)\n    setNextFillColor(Layer, color.r, color.g, color.b, 1)  \n    addText(Layer, font, text, x,y) \nend\n\n\n\n\n------------------------------------------------------\n\n\n\n\n\nsetDefaultStrokeColor(Layer,Shape_Line,color2.r, color2.g, color2.b, 1)\nsetDefaultStrokeWidth(Layer,Shape_Line,6)\n\nlocal x = rx*0.2\nlocal y = ry*0.0475\nlocal width = rx*0.6\nlocal height = ry*0.785\n\nif #Ingredients == 0 then\n    AddText(AlignH_Center,{r=0.1,g=1.2,b=0.1},NormalFont,#Ingredients..\" Missing Ingredients\", rx*0.25, ry*0.0475)\nelse\n    AddText(AlignH_Center,{r=1.2,g=0.1,b=0.1},NormalFont,#Ingredients..\" Missing Ingredients:\", rx*0.25, ry*0.0475)\nend\nsetNextFillColor(Layer, 0.2, 0.2, 0.2, 0.3)  \naddBoxRounded(Layer,rx*0.05,ry*0.0275,rx*0.4,ry*0.046,5)\nlocal Max = 16\nif #Ingredients < Max then\n    Max = #Ingredients\nelse\n    AddText(AlignH_Center,fontColor,SmallestFont,\"(...)\", rx*0.25, ry*0.07+ry*17*0.035)\nend\nfor i=1, Max do\n    AddText(AlignH_Center,fontColor,SmallestFont,Ingredients[i], rx*0.25, ry*0.07+ry*i*0.035)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n--ORES--\nif #Ores == 0 then\n    AddText(AlignH_Center,{r=0.1,g=1.2,b=0.1},NormalFont,#Ores..\" Ores Required\", rx*0.75, ry*0.0475)\nelse\n    AddText(AlignH_Center,{r=1.2,g=0.1,b=0.1},NormalFont,#Ores..\" Ores Required:\", rx*0.75, ry*0.0475)\nend\nsetNextFillColor(Layer, 0.2, 0.2, 0.2, 0.3)   \naddBoxRounded(Layer,rx*0.55,ry*0.0275,rx*0.4,ry*0.046,5)\nfor i=1, #Ores do    \n    --if i < 9 then -- can only show 8 images per screen\n        if (i % 2 == 0) then --it is even\n            x = rx*0.62\n        else\n            x = rx*0.82\n            y = ry*0.09+ry*i*0.027\n        end\n\n        image = loadImage(Get_Ore(Ores[i])[2])\n        size = 28\n        addImage(Layer, image, x-size*1.1, y-size*0.5, size, size)\n    --end    \n    AddText(AlignH_Left,fontColor,NormalFont,Get_Ore(Ores[i])[1], x, y)\nend\n\n\ny = ry*0.45 --SCHEMS--\nif #Schems == 0 then\n    AddText(AlignH_Center,{r=0.1,g=1.2,b=0.1},NormalFont,#Schems..\" Missing Schematics\", rx*0.75, y)\nelse\n    AddText(AlignH_Center,{r=1.2,g=0.1,b=0.1},NormalFont,#Schems..\" Missing Schematics:\", rx*0.75, y)\nend\nsetNextFillColor(Layer, 0.2, 0.2, 0.2, 0.3)   \naddBoxRounded(Layer,rx*0.55,y-ry*0.02,rx*0.4,ry*0.046,5)\nfor i=1, #Schems do\n    AddText(AlignH_Center,fontColor,SmallFont,Schems[i], rx*0.75, y+ry*0.02+ry*i*0.035)\nend\nsetDefaultStrokeWidth(Layer,Shape_Line,2)\nAddText(AlignH_Center,fontColor,SmallestFont,\"Last update: \"..LastUpdate, rx*0.75,ry*0.97)\nAddText(AlignH_Center,fontColor,SmallestFont,\"Monitoring Screen\", rx*0.25,ry*0.97)\n\ny = ry*0.71 --STATS--\nlocal Efficiency = math.floor(Running+Pending)*100 / math.floor(Total-Stopped)\nsetNextFillColor(Layer, 0.2, 0.2, 0.2, 0.3)   \naddBoxRounded(Layer,rx*0.05,y,rx*0.4,ry*0.23,5)\nDrawPie(rx*0.345,y+ry*0.115,320,math.floor(Efficiency),\"\")\nAddText(AlignH_Center,fontColor,NormalFont,\"Industry Efficiency\", rx*0.17,y+ry*0.03)\nAddText(AlignH_Left,fontColor,SmallestFont,\"Running: \"..Running, rx*0.13,y+ry*0.08)\nAddText(AlignH_Left,fontColor,SmallestFont,\"Pending: \"..Pending, rx*0.13,y+ry*0.11)\nAddText(AlignH_Left,fontColor,SmallestFont,\"Stopped: \"..Stopped, rx*0.13,y+ry*0.14)\nAddText(AlignH_Left,fontColor,SmallestFont,\"Other: \"..Other, rx*0.13,y+ry*0.17)\nAddText(AlignH_Left,fontColor,SmallestFont,\"Total: \"..Total, rx*0.13,y+ry*0.20)\n\n\ny = ry*0.85 --VENTING--\nx = rx*0.41\ntable.sort(Containers, function(a,b) return a.n > b.n end) -- sorting table \n--VentingRequired = false\n\nsetNextFillColor(Layer, 0.2, 0.2, 0.2, 0.3)   \naddBoxRounded(Layer,x+rx*0.14,y-ry*0.14,rx*0.4,ry*0.23,5)\n\nfor i=1, #Containers do\n    if Containers[i].m == 0 then Containers[i].m = 24000 end\n    p = math.floor(Containers[i].c*100/Containers[i].m) or 0\n    DrawPie(x + rx*0.194*i,y,500,p,Containers[i].n)\n    if p > 95 then VentingRequired = true end\nend\n\nif VentingRequired then\n    AddText(AlignH_Center,{r=1.2,g=0.1,b=0.1},NormalFont,\"Venting Required!\", x+rx*0.34, y-ry*0.12)\nelse\n    AddText(AlignH_Center,{r=0.1,g=1.2,b=0.1},NormalFont,\"No Venting Required\", x+rx*0.34, y-ry*0.12)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n    --requestAnimationFrame(20)\n]]","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"3"}],"methods":[],"events":[]}
